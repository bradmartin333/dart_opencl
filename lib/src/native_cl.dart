// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeCL {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeCL(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeCL.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// /
  int clGetPlatformIDs(
    int num_entries,
    ffi.Pointer<cl_platform_id> platforms,
    ffi.Pointer<cl_uint> num_platforms,
  ) {
    return _clGetPlatformIDs(
      num_entries,
      platforms,
      num_platforms,
    );
  }

  late final _clGetPlatformIDsPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_uint, ffi.Pointer<cl_platform_id>,
              ffi.Pointer<cl_uint>)>>('clGetPlatformIDs');
  late final _clGetPlatformIDs = _clGetPlatformIDsPtr.asFunction<
      int Function(int, ffi.Pointer<cl_platform_id>, ffi.Pointer<cl_uint>)>();

  int clGetPlatformInfo(
    cl_platform_id platform,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetPlatformInfo(
      platform,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetPlatformInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_platform_id,
              cl_platform_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetPlatformInfo');
  late final _clGetPlatformInfo = _clGetPlatformInfoPtr.asFunction<
      int Function(cl_platform_id, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int clGetDeviceIDs(
    cl_platform_id platform,
    int device_type,
    int num_entries,
    ffi.Pointer<cl_device_id> devices,
    ffi.Pointer<cl_uint> num_devices,
  ) {
    return _clGetDeviceIDs(
      platform,
      device_type,
      num_entries,
      devices,
      num_devices,
    );
  }

  late final _clGetDeviceIDsPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_platform_id,
              cl_device_type,
              cl_uint,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<cl_uint>)>>('clGetDeviceIDs');
  late final _clGetDeviceIDs = _clGetDeviceIDsPtr.asFunction<
      int Function(cl_platform_id, int, int, ffi.Pointer<cl_device_id>,
          ffi.Pointer<cl_uint>)>();

  int clGetDeviceInfo(
    cl_device_id device,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetDeviceInfo(
      device,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetDeviceInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_device_id,
              cl_device_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetDeviceInfo');
  late final _clGetDeviceInfo = _clGetDeviceInfoPtr.asFunction<
      int Function(cl_device_id, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int clCreateSubDevices(
    cl_device_id in_device,
    ffi.Pointer<cl_device_partition_property> properties,
    int num_devices,
    ffi.Pointer<cl_device_id> out_devices,
    ffi.Pointer<cl_uint> num_devices_ret,
  ) {
    return _clCreateSubDevices(
      in_device,
      properties,
      num_devices,
      out_devices,
      num_devices_ret,
    );
  }

  late final _clCreateSubDevicesPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_device_id,
              ffi.Pointer<cl_device_partition_property>,
              cl_uint,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<cl_uint>)>>('clCreateSubDevices');
  late final _clCreateSubDevices = _clCreateSubDevicesPtr.asFunction<
      int Function(cl_device_id, ffi.Pointer<cl_device_partition_property>, int,
          ffi.Pointer<cl_device_id>, ffi.Pointer<cl_uint>)>();

  int clRetainDevice(
    cl_device_id device,
  ) {
    return _clRetainDevice(
      device,
    );
  }

  late final _clRetainDevicePtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_device_id)>>(
          'clRetainDevice');
  late final _clRetainDevice =
      _clRetainDevicePtr.asFunction<int Function(cl_device_id)>();

  int clReleaseDevice(
    cl_device_id device,
  ) {
    return _clReleaseDevice(
      device,
    );
  }

  late final _clReleaseDevicePtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_device_id)>>(
          'clReleaseDevice');
  late final _clReleaseDevice =
      _clReleaseDevicePtr.asFunction<int Function(cl_device_id)>();

  int clSetDefaultDeviceCommandQueue(
    cl_context context,
    cl_device_id device,
    cl_command_queue command_queue,
  ) {
    return _clSetDefaultDeviceCommandQueue(
      context,
      device,
      command_queue,
    );
  }

  late final _clSetDefaultDeviceCommandQueuePtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_context, cl_device_id,
              cl_command_queue)>>('clSetDefaultDeviceCommandQueue');
  late final _clSetDefaultDeviceCommandQueue =
      _clSetDefaultDeviceCommandQueuePtr.asFunction<
          int Function(cl_context, cl_device_id, cl_command_queue)>();

  int clGetDeviceAndHostTimer(
    cl_device_id device,
    ffi.Pointer<cl_ulong> device_timestamp,
    ffi.Pointer<cl_ulong> host_timestamp,
  ) {
    return _clGetDeviceAndHostTimer(
      device,
      device_timestamp,
      host_timestamp,
    );
  }

  late final _clGetDeviceAndHostTimerPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_device_id, ffi.Pointer<cl_ulong>,
              ffi.Pointer<cl_ulong>)>>('clGetDeviceAndHostTimer');
  late final _clGetDeviceAndHostTimer = _clGetDeviceAndHostTimerPtr.asFunction<
      int Function(
          cl_device_id, ffi.Pointer<cl_ulong>, ffi.Pointer<cl_ulong>)>();

  int clGetHostTimer(
    cl_device_id device,
    ffi.Pointer<cl_ulong> host_timestamp,
  ) {
    return _clGetHostTimer(
      device,
      host_timestamp,
    );
  }

  late final _clGetHostTimerPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_device_id, ffi.Pointer<cl_ulong>)>>('clGetHostTimer');
  late final _clGetHostTimer = _clGetHostTimerPtr
      .asFunction<int Function(cl_device_id, ffi.Pointer<cl_ulong>)>();

  cl_context clCreateContext(
    ffi.Pointer<cl_context_properties> properties,
    int num_devices,
    ffi.Pointer<cl_device_id> devices,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
                    ffi.Size, ffi.Pointer<ffi.Void>)>>
        pfn_notify,
    ffi.Pointer<ffi.Void> user_data,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateContext(
      properties,
      num_devices,
      devices,
      pfn_notify,
      user_data,
      errcode_ret,
    );
  }

  late final _clCreateContextPtr = _lookup<
      ffi.NativeFunction<
          cl_context Function(
              ffi.Pointer<cl_context_properties>,
              cl_uint,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Size,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<cl_int>)>>('clCreateContext');
  late final _clCreateContext = _clCreateContextPtr.asFunction<
      cl_context Function(
          ffi.Pointer<cl_context_properties>,
          int,
          ffi.Pointer<cl_device_id>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Char>,
                      ffi.Pointer<ffi.Void>, ffi.Size, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<cl_int>)>();

  cl_context clCreateContextFromType(
    ffi.Pointer<cl_context_properties> properties,
    int device_type,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
                    ffi.Size, ffi.Pointer<ffi.Void>)>>
        pfn_notify,
    ffi.Pointer<ffi.Void> user_data,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateContextFromType(
      properties,
      device_type,
      pfn_notify,
      user_data,
      errcode_ret,
    );
  }

  late final _clCreateContextFromTypePtr = _lookup<
      ffi.NativeFunction<
          cl_context Function(
              ffi.Pointer<cl_context_properties>,
              cl_device_type,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Char>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Size,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<cl_int>)>>('clCreateContextFromType');
  late final _clCreateContextFromType = _clCreateContextFromTypePtr.asFunction<
      cl_context Function(
          ffi.Pointer<cl_context_properties>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Char>,
                      ffi.Pointer<ffi.Void>, ffi.Size, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<cl_int>)>();

  int clRetainContext(
    cl_context context,
  ) {
    return _clRetainContext(
      context,
    );
  }

  late final _clRetainContextPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_context)>>(
          'clRetainContext');
  late final _clRetainContext =
      _clRetainContextPtr.asFunction<int Function(cl_context)>();

  int clReleaseContext(
    cl_context context,
  ) {
    return _clReleaseContext(
      context,
    );
  }

  late final _clReleaseContextPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_context)>>(
          'clReleaseContext');
  late final _clReleaseContext =
      _clReleaseContextPtr.asFunction<int Function(cl_context)>();

  int clGetContextInfo(
    cl_context context,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetContextInfo(
      context,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetContextInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_context,
              cl_context_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetContextInfo');
  late final _clGetContextInfo = _clGetContextInfoPtr.asFunction<
      int Function(cl_context, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int clSetContextDestructorCallback(
    cl_context context,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(cl_context, ffi.Pointer<ffi.Void>)>>
        pfn_notify,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _clSetContextDestructorCallback(
      context,
      pfn_notify,
      user_data,
    );
  }

  late final _clSetContextDestructorCallbackPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_context,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(cl_context, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('clSetContextDestructorCallback');
  late final _clSetContextDestructorCallback =
      _clSetContextDestructorCallbackPtr.asFunction<
          int Function(
              cl_context,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(cl_context, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>();

  cl_command_queue clCreateCommandQueueWithProperties(
    cl_context context,
    cl_device_id device,
    ffi.Pointer<cl_queue_properties> properties,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateCommandQueueWithProperties(
      context,
      device,
      properties,
      errcode_ret,
    );
  }

  late final _clCreateCommandQueueWithPropertiesPtr = _lookup<
      ffi.NativeFunction<
          cl_command_queue Function(
              cl_context,
              cl_device_id,
              ffi.Pointer<cl_queue_properties>,
              ffi.Pointer<cl_int>)>>('clCreateCommandQueueWithProperties');
  late final _clCreateCommandQueueWithProperties =
      _clCreateCommandQueueWithPropertiesPtr.asFunction<
          cl_command_queue Function(cl_context, cl_device_id,
              ffi.Pointer<cl_queue_properties>, ffi.Pointer<cl_int>)>();

  int clRetainCommandQueue(
    cl_command_queue command_queue,
  ) {
    return _clRetainCommandQueue(
      command_queue,
    );
  }

  late final _clRetainCommandQueuePtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_command_queue)>>(
          'clRetainCommandQueue');
  late final _clRetainCommandQueue =
      _clRetainCommandQueuePtr.asFunction<int Function(cl_command_queue)>();

  int clReleaseCommandQueue(
    cl_command_queue command_queue,
  ) {
    return _clReleaseCommandQueue(
      command_queue,
    );
  }

  late final _clReleaseCommandQueuePtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_command_queue)>>(
          'clReleaseCommandQueue');
  late final _clReleaseCommandQueue =
      _clReleaseCommandQueuePtr.asFunction<int Function(cl_command_queue)>();

  int clGetCommandQueueInfo(
    cl_command_queue command_queue,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetCommandQueueInfo(
      command_queue,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetCommandQueueInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_command_queue_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetCommandQueueInfo');
  late final _clGetCommandQueueInfo = _clGetCommandQueueInfoPtr.asFunction<
      int Function(cl_command_queue, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  cl_mem clCreateBuffer(
    cl_context context,
    int flags,
    int size,
    ffi.Pointer<ffi.Void> host_ptr,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateBuffer(
      context,
      flags,
      size,
      host_ptr,
      errcode_ret,
    );
  }

  late final _clCreateBufferPtr = _lookup<
      ffi.NativeFunction<
          cl_mem Function(cl_context, cl_mem_flags, ffi.Size,
              ffi.Pointer<ffi.Void>, ffi.Pointer<cl_int>)>>('clCreateBuffer');
  late final _clCreateBuffer = _clCreateBufferPtr.asFunction<
      cl_mem Function(
          cl_context, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<cl_int>)>();

  cl_mem clCreateSubBuffer(
    cl_mem buffer,
    int flags,
    int buffer_create_type,
    ffi.Pointer<ffi.Void> buffer_create_info,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateSubBuffer(
      buffer,
      flags,
      buffer_create_type,
      buffer_create_info,
      errcode_ret,
    );
  }

  late final _clCreateSubBufferPtr = _lookup<
      ffi.NativeFunction<
          cl_mem Function(
              cl_mem,
              cl_mem_flags,
              cl_buffer_create_type,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<cl_int>)>>('clCreateSubBuffer');
  late final _clCreateSubBuffer = _clCreateSubBufferPtr.asFunction<
      cl_mem Function(
          cl_mem, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<cl_int>)>();

  cl_mem clCreateImage(
    cl_context context,
    int flags,
    ffi.Pointer<cl_image_format> image_format,
    ffi.Pointer<cl_image_desc> image_desc,
    ffi.Pointer<ffi.Void> host_ptr,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateImage(
      context,
      flags,
      image_format,
      image_desc,
      host_ptr,
      errcode_ret,
    );
  }

  late final _clCreateImagePtr = _lookup<
      ffi.NativeFunction<
          cl_mem Function(
              cl_context,
              cl_mem_flags,
              ffi.Pointer<cl_image_format>,
              ffi.Pointer<cl_image_desc>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<cl_int>)>>('clCreateImage');
  late final _clCreateImage = _clCreateImagePtr.asFunction<
      cl_mem Function(
          cl_context,
          int,
          ffi.Pointer<cl_image_format>,
          ffi.Pointer<cl_image_desc>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<cl_int>)>();

  cl_mem clCreatePipe(
    cl_context context,
    int flags,
    int pipe_packet_size,
    int pipe_max_packets,
    ffi.Pointer<cl_pipe_properties> properties,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreatePipe(
      context,
      flags,
      pipe_packet_size,
      pipe_max_packets,
      properties,
      errcode_ret,
    );
  }

  late final _clCreatePipePtr = _lookup<
      ffi.NativeFunction<
          cl_mem Function(
              cl_context,
              cl_mem_flags,
              cl_uint,
              cl_uint,
              ffi.Pointer<cl_pipe_properties>,
              ffi.Pointer<cl_int>)>>('clCreatePipe');
  late final _clCreatePipe = _clCreatePipePtr.asFunction<
      cl_mem Function(cl_context, int, int, int,
          ffi.Pointer<cl_pipe_properties>, ffi.Pointer<cl_int>)>();

  cl_mem clCreateBufferWithProperties(
    cl_context context,
    ffi.Pointer<cl_mem_properties> properties,
    int flags,
    int size,
    ffi.Pointer<ffi.Void> host_ptr,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateBufferWithProperties(
      context,
      properties,
      flags,
      size,
      host_ptr,
      errcode_ret,
    );
  }

  late final _clCreateBufferWithPropertiesPtr = _lookup<
      ffi.NativeFunction<
          cl_mem Function(
              cl_context,
              ffi.Pointer<cl_mem_properties>,
              cl_mem_flags,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<cl_int>)>>('clCreateBufferWithProperties');
  late final _clCreateBufferWithProperties =
      _clCreateBufferWithPropertiesPtr.asFunction<
          cl_mem Function(cl_context, ffi.Pointer<cl_mem_properties>, int, int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<cl_int>)>();

  cl_mem clCreateImageWithProperties(
    cl_context context,
    ffi.Pointer<cl_mem_properties> properties,
    int flags,
    ffi.Pointer<cl_image_format> image_format,
    ffi.Pointer<cl_image_desc> image_desc,
    ffi.Pointer<ffi.Void> host_ptr,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateImageWithProperties(
      context,
      properties,
      flags,
      image_format,
      image_desc,
      host_ptr,
      errcode_ret,
    );
  }

  late final _clCreateImageWithPropertiesPtr = _lookup<
      ffi.NativeFunction<
          cl_mem Function(
              cl_context,
              ffi.Pointer<cl_mem_properties>,
              cl_mem_flags,
              ffi.Pointer<cl_image_format>,
              ffi.Pointer<cl_image_desc>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<cl_int>)>>('clCreateImageWithProperties');
  late final _clCreateImageWithProperties =
      _clCreateImageWithPropertiesPtr.asFunction<
          cl_mem Function(
              cl_context,
              ffi.Pointer<cl_mem_properties>,
              int,
              ffi.Pointer<cl_image_format>,
              ffi.Pointer<cl_image_desc>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<cl_int>)>();

  int clRetainMemObject(
    cl_mem memobj,
  ) {
    return _clRetainMemObject(
      memobj,
    );
  }

  late final _clRetainMemObjectPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_mem)>>('clRetainMemObject');
  late final _clRetainMemObject =
      _clRetainMemObjectPtr.asFunction<int Function(cl_mem)>();

  int clReleaseMemObject(
    cl_mem memobj,
  ) {
    return _clReleaseMemObject(
      memobj,
    );
  }

  late final _clReleaseMemObjectPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_mem)>>(
          'clReleaseMemObject');
  late final _clReleaseMemObject =
      _clReleaseMemObjectPtr.asFunction<int Function(cl_mem)>();

  int clGetSupportedImageFormats(
    cl_context context,
    int flags,
    int image_type,
    int num_entries,
    ffi.Pointer<cl_image_format> image_formats,
    ffi.Pointer<cl_uint> num_image_formats,
  ) {
    return _clGetSupportedImageFormats(
      context,
      flags,
      image_type,
      num_entries,
      image_formats,
      num_image_formats,
    );
  }

  late final _clGetSupportedImageFormatsPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_context,
              cl_mem_flags,
              cl_mem_object_type,
              cl_uint,
              ffi.Pointer<cl_image_format>,
              ffi.Pointer<cl_uint>)>>('clGetSupportedImageFormats');
  late final _clGetSupportedImageFormats =
      _clGetSupportedImageFormatsPtr.asFunction<
          int Function(cl_context, int, int, int, ffi.Pointer<cl_image_format>,
              ffi.Pointer<cl_uint>)>();

  int clGetMemObjectInfo(
    cl_mem memobj,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetMemObjectInfo(
      memobj,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetMemObjectInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_mem, cl_mem_info, ffi.Size, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetMemObjectInfo');
  late final _clGetMemObjectInfo = _clGetMemObjectInfoPtr.asFunction<
      int Function(
          cl_mem, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int clGetImageInfo(
    cl_mem image,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetImageInfo(
      image,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetImageInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_mem, cl_image_info, ffi.Size,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>>('clGetImageInfo');
  late final _clGetImageInfo = _clGetImageInfoPtr.asFunction<
      int Function(
          cl_mem, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int clGetPipeInfo(
    cl_mem pipe,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetPipeInfo(
      pipe,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetPipeInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_mem, cl_pipe_info, ffi.Size, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetPipeInfo');
  late final _clGetPipeInfo = _clGetPipeInfoPtr.asFunction<
      int Function(
          cl_mem, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int clSetMemObjectDestructorCallback(
    cl_mem memobj,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(cl_mem, ffi.Pointer<ffi.Void>)>>
        pfn_notify,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _clSetMemObjectDestructorCallback(
      memobj,
      pfn_notify,
      user_data,
    );
  }

  late final _clSetMemObjectDestructorCallbackPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_mem,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(cl_mem, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('clSetMemObjectDestructorCallback');
  late final _clSetMemObjectDestructorCallback =
      _clSetMemObjectDestructorCallbackPtr.asFunction<
          int Function(
              cl_mem,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(cl_mem, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> clSVMAlloc(
    cl_context context,
    int flags,
    int size,
    int alignment,
  ) {
    return _clSVMAlloc(
      context,
      flags,
      size,
      alignment,
    );
  }

  late final _clSVMAllocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              cl_context, cl_svm_mem_flags, ffi.Size, cl_uint)>>('clSVMAlloc');
  late final _clSVMAlloc = _clSVMAllocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(cl_context, int, int, int)>();

  void clSVMFree(
    cl_context context,
    ffi.Pointer<ffi.Void> svm_pointer,
  ) {
    return _clSVMFree(
      context,
      svm_pointer,
    );
  }

  late final _clSVMFreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(cl_context, ffi.Pointer<ffi.Void>)>>('clSVMFree');
  late final _clSVMFree = _clSVMFreePtr
      .asFunction<void Function(cl_context, ffi.Pointer<ffi.Void>)>();

  cl_sampler clCreateSamplerWithProperties(
    cl_context context,
    ffi.Pointer<cl_sampler_properties> sampler_properties,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateSamplerWithProperties(
      context,
      sampler_properties,
      errcode_ret,
    );
  }

  late final _clCreateSamplerWithPropertiesPtr = _lookup<
      ffi.NativeFunction<
          cl_sampler Function(cl_context, ffi.Pointer<cl_sampler_properties>,
              ffi.Pointer<cl_int>)>>('clCreateSamplerWithProperties');
  late final _clCreateSamplerWithProperties =
      _clCreateSamplerWithPropertiesPtr.asFunction<
          cl_sampler Function(cl_context, ffi.Pointer<cl_sampler_properties>,
              ffi.Pointer<cl_int>)>();

  int clRetainSampler(
    cl_sampler sampler,
  ) {
    return _clRetainSampler(
      sampler,
    );
  }

  late final _clRetainSamplerPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_sampler)>>(
          'clRetainSampler');
  late final _clRetainSampler =
      _clRetainSamplerPtr.asFunction<int Function(cl_sampler)>();

  int clReleaseSampler(
    cl_sampler sampler,
  ) {
    return _clReleaseSampler(
      sampler,
    );
  }

  late final _clReleaseSamplerPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_sampler)>>(
          'clReleaseSampler');
  late final _clReleaseSampler =
      _clReleaseSamplerPtr.asFunction<int Function(cl_sampler)>();

  int clGetSamplerInfo(
    cl_sampler sampler,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetSamplerInfo(
      sampler,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetSamplerInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_sampler,
              cl_sampler_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetSamplerInfo');
  late final _clGetSamplerInfo = _clGetSamplerInfoPtr.asFunction<
      int Function(cl_sampler, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  cl_program clCreateProgramWithSource(
    cl_context context,
    int count,
    ffi.Pointer<ffi.Pointer<ffi.Char>> strings,
    ffi.Pointer<ffi.Size> lengths,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateProgramWithSource(
      context,
      count,
      strings,
      lengths,
      errcode_ret,
    );
  }

  late final _clCreateProgramWithSourcePtr = _lookup<
      ffi.NativeFunction<
          cl_program Function(
              cl_context,
              cl_uint,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<cl_int>)>>('clCreateProgramWithSource');
  late final _clCreateProgramWithSource =
      _clCreateProgramWithSourcePtr.asFunction<
          cl_program Function(
              cl_context,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<cl_int>)>();

  cl_program clCreateProgramWithBinary(
    cl_context context,
    int num_devices,
    ffi.Pointer<cl_device_id> device_list,
    ffi.Pointer<ffi.Size> lengths,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> binaries,
    ffi.Pointer<cl_int> binary_status,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateProgramWithBinary(
      context,
      num_devices,
      device_list,
      lengths,
      binaries,
      binary_status,
      errcode_ret,
    );
  }

  late final _clCreateProgramWithBinaryPtr = _lookup<
      ffi.NativeFunction<
          cl_program Function(
              cl_context,
              cl_uint,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<cl_int>,
              ffi.Pointer<cl_int>)>>('clCreateProgramWithBinary');
  late final _clCreateProgramWithBinary =
      _clCreateProgramWithBinaryPtr.asFunction<
          cl_program Function(
              cl_context,
              int,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<cl_int>,
              ffi.Pointer<cl_int>)>();

  cl_program clCreateProgramWithBuiltInKernels(
    cl_context context,
    int num_devices,
    ffi.Pointer<cl_device_id> device_list,
    ffi.Pointer<ffi.Char> kernel_names,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateProgramWithBuiltInKernels(
      context,
      num_devices,
      device_list,
      kernel_names,
      errcode_ret,
    );
  }

  late final _clCreateProgramWithBuiltInKernelsPtr = _lookup<
      ffi.NativeFunction<
          cl_program Function(
              cl_context,
              cl_uint,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<cl_int>)>>('clCreateProgramWithBuiltInKernels');
  late final _clCreateProgramWithBuiltInKernels =
      _clCreateProgramWithBuiltInKernelsPtr.asFunction<
          cl_program Function(cl_context, int, ffi.Pointer<cl_device_id>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<cl_int>)>();

  cl_program clCreateProgramWithIL(
    cl_context context,
    ffi.Pointer<ffi.Void> il,
    int length,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateProgramWithIL(
      context,
      il,
      length,
      errcode_ret,
    );
  }

  late final _clCreateProgramWithILPtr = _lookup<
      ffi.NativeFunction<
          cl_program Function(cl_context, ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<cl_int>)>>('clCreateProgramWithIL');
  late final _clCreateProgramWithIL = _clCreateProgramWithILPtr.asFunction<
      cl_program Function(
          cl_context, ffi.Pointer<ffi.Void>, int, ffi.Pointer<cl_int>)>();

  int clRetainProgram(
    cl_program program,
  ) {
    return _clRetainProgram(
      program,
    );
  }

  late final _clRetainProgramPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_program)>>(
          'clRetainProgram');
  late final _clRetainProgram =
      _clRetainProgramPtr.asFunction<int Function(cl_program)>();

  int clReleaseProgram(
    cl_program program,
  ) {
    return _clReleaseProgram(
      program,
    );
  }

  late final _clReleaseProgramPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_program)>>(
          'clReleaseProgram');
  late final _clReleaseProgram =
      _clReleaseProgramPtr.asFunction<int Function(cl_program)>();

  int clBuildProgram(
    cl_program program,
    int num_devices,
    ffi.Pointer<cl_device_id> device_list,
    ffi.Pointer<ffi.Char> options,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>
        pfn_notify,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _clBuildProgram(
      program,
      num_devices,
      device_list,
      options,
      pfn_notify,
      user_data,
    );
  }

  late final _clBuildProgramPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_program,
              cl_uint,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('clBuildProgram');
  late final _clBuildProgram = _clBuildProgramPtr.asFunction<
      int Function(
          cl_program,
          int,
          ffi.Pointer<cl_device_id>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  int clCompileProgram(
    cl_program program,
    int num_devices,
    ffi.Pointer<cl_device_id> device_list,
    ffi.Pointer<ffi.Char> options,
    int num_input_headers,
    ffi.Pointer<cl_program> input_headers,
    ffi.Pointer<ffi.Pointer<ffi.Char>> header_include_names,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>
        pfn_notify,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _clCompileProgram(
      program,
      num_devices,
      device_list,
      options,
      num_input_headers,
      input_headers,
      header_include_names,
      pfn_notify,
      user_data,
    );
  }

  late final _clCompileProgramPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_program,
              cl_uint,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<ffi.Char>,
              cl_uint,
              ffi.Pointer<cl_program>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('clCompileProgram');
  late final _clCompileProgram = _clCompileProgramPtr.asFunction<
      int Function(
          cl_program,
          int,
          ffi.Pointer<cl_device_id>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<cl_program>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  cl_program clLinkProgram(
    cl_context context,
    int num_devices,
    ffi.Pointer<cl_device_id> device_list,
    ffi.Pointer<ffi.Char> options,
    int num_input_programs,
    ffi.Pointer<cl_program> input_programs,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>
        pfn_notify,
    ffi.Pointer<ffi.Void> user_data,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clLinkProgram(
      context,
      num_devices,
      device_list,
      options,
      num_input_programs,
      input_programs,
      pfn_notify,
      user_data,
      errcode_ret,
    );
  }

  late final _clLinkProgramPtr = _lookup<
      ffi.NativeFunction<
          cl_program Function(
              cl_context,
              cl_uint,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<ffi.Char>,
              cl_uint,
              ffi.Pointer<cl_program>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<cl_int>)>>('clLinkProgram');
  late final _clLinkProgram = _clLinkProgramPtr.asFunction<
      cl_program Function(
          cl_context,
          int,
          ffi.Pointer<cl_device_id>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<cl_program>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<cl_int>)>();

  int clSetProgramReleaseCallback(
    cl_program program,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>
        pfn_notify,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _clSetProgramReleaseCallback(
      program,
      pfn_notify,
      user_data,
    );
  }

  late final _clSetProgramReleaseCallbackPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_program,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('clSetProgramReleaseCallback');
  late final _clSetProgramReleaseCallback =
      _clSetProgramReleaseCallbackPtr.asFunction<
          int Function(
              cl_program,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(cl_program, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>();

  int clSetProgramSpecializationConstant(
    cl_program program,
    int spec_id,
    int spec_size,
    ffi.Pointer<ffi.Void> spec_value,
  ) {
    return _clSetProgramSpecializationConstant(
      program,
      spec_id,
      spec_size,
      spec_value,
    );
  }

  late final _clSetProgramSpecializationConstantPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_program, cl_uint, ffi.Size,
              ffi.Pointer<ffi.Void>)>>('clSetProgramSpecializationConstant');
  late final _clSetProgramSpecializationConstant =
      _clSetProgramSpecializationConstantPtr.asFunction<
          int Function(cl_program, int, int, ffi.Pointer<ffi.Void>)>();

  int clUnloadPlatformCompiler(
    cl_platform_id platform,
  ) {
    return _clUnloadPlatformCompiler(
      platform,
    );
  }

  late final _clUnloadPlatformCompilerPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_platform_id)>>(
          'clUnloadPlatformCompiler');
  late final _clUnloadPlatformCompiler =
      _clUnloadPlatformCompilerPtr.asFunction<int Function(cl_platform_id)>();

  int clGetProgramInfo(
    cl_program program,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetProgramInfo(
      program,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetProgramInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_program,
              cl_program_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetProgramInfo');
  late final _clGetProgramInfo = _clGetProgramInfoPtr.asFunction<
      int Function(cl_program, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int clGetProgramBuildInfo(
    cl_program program,
    cl_device_id device,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetProgramBuildInfo(
      program,
      device,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetProgramBuildInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_program,
              cl_device_id,
              cl_program_build_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetProgramBuildInfo');
  late final _clGetProgramBuildInfo = _clGetProgramBuildInfoPtr.asFunction<
      int Function(cl_program, cl_device_id, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  cl_kernel clCreateKernel(
    cl_program program,
    ffi.Pointer<ffi.Char> kernel_name,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateKernel(
      program,
      kernel_name,
      errcode_ret,
    );
  }

  late final _clCreateKernelPtr = _lookup<
      ffi.NativeFunction<
          cl_kernel Function(cl_program, ffi.Pointer<ffi.Char>,
              ffi.Pointer<cl_int>)>>('clCreateKernel');
  late final _clCreateKernel = _clCreateKernelPtr.asFunction<
      cl_kernel Function(
          cl_program, ffi.Pointer<ffi.Char>, ffi.Pointer<cl_int>)>();

  int clCreateKernelsInProgram(
    cl_program program,
    int num_kernels,
    ffi.Pointer<cl_kernel> kernels,
    ffi.Pointer<cl_uint> num_kernels_ret,
  ) {
    return _clCreateKernelsInProgram(
      program,
      num_kernels,
      kernels,
      num_kernels_ret,
    );
  }

  late final _clCreateKernelsInProgramPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_program, cl_uint, ffi.Pointer<cl_kernel>,
              ffi.Pointer<cl_uint>)>>('clCreateKernelsInProgram');
  late final _clCreateKernelsInProgram =
      _clCreateKernelsInProgramPtr.asFunction<
          int Function(
              cl_program, int, ffi.Pointer<cl_kernel>, ffi.Pointer<cl_uint>)>();

  cl_kernel clCloneKernel(
    cl_kernel source_kernel,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCloneKernel(
      source_kernel,
      errcode_ret,
    );
  }

  late final _clCloneKernelPtr = _lookup<
      ffi.NativeFunction<
          cl_kernel Function(cl_kernel, ffi.Pointer<cl_int>)>>('clCloneKernel');
  late final _clCloneKernel = _clCloneKernelPtr
      .asFunction<cl_kernel Function(cl_kernel, ffi.Pointer<cl_int>)>();

  int clRetainKernel(
    cl_kernel kernel,
  ) {
    return _clRetainKernel(
      kernel,
    );
  }

  late final _clRetainKernelPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_kernel)>>('clRetainKernel');
  late final _clRetainKernel =
      _clRetainKernelPtr.asFunction<int Function(cl_kernel)>();

  int clReleaseKernel(
    cl_kernel kernel,
  ) {
    return _clReleaseKernel(
      kernel,
    );
  }

  late final _clReleaseKernelPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_kernel)>>(
          'clReleaseKernel');
  late final _clReleaseKernel =
      _clReleaseKernelPtr.asFunction<int Function(cl_kernel)>();

  int clSetKernelArg(
    cl_kernel kernel,
    int arg_index,
    int arg_size,
    ffi.Pointer<ffi.Void> arg_value,
  ) {
    return _clSetKernelArg(
      kernel,
      arg_index,
      arg_size,
      arg_value,
    );
  }

  late final _clSetKernelArgPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_kernel, cl_uint, ffi.Size,
              ffi.Pointer<ffi.Void>)>>('clSetKernelArg');
  late final _clSetKernelArg = _clSetKernelArgPtr
      .asFunction<int Function(cl_kernel, int, int, ffi.Pointer<ffi.Void>)>();

  int clSetKernelArgSVMPointer(
    cl_kernel kernel,
    int arg_index,
    ffi.Pointer<ffi.Void> arg_value,
  ) {
    return _clSetKernelArgSVMPointer(
      kernel,
      arg_index,
      arg_value,
    );
  }

  late final _clSetKernelArgSVMPointerPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_kernel, cl_uint,
              ffi.Pointer<ffi.Void>)>>('clSetKernelArgSVMPointer');
  late final _clSetKernelArgSVMPointer = _clSetKernelArgSVMPointerPtr
      .asFunction<int Function(cl_kernel, int, ffi.Pointer<ffi.Void>)>();

  int clSetKernelExecInfo(
    cl_kernel kernel,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
  ) {
    return _clSetKernelExecInfo(
      kernel,
      param_name,
      param_value_size,
      param_value,
    );
  }

  late final _clSetKernelExecInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_kernel, cl_kernel_exec_info, ffi.Size,
              ffi.Pointer<ffi.Void>)>>('clSetKernelExecInfo');
  late final _clSetKernelExecInfo = _clSetKernelExecInfoPtr
      .asFunction<int Function(cl_kernel, int, int, ffi.Pointer<ffi.Void>)>();

  int clGetKernelInfo(
    cl_kernel kernel,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetKernelInfo(
      kernel,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetKernelInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_kernel,
              cl_kernel_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetKernelInfo');
  late final _clGetKernelInfo = _clGetKernelInfoPtr.asFunction<
      int Function(
          cl_kernel, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int clGetKernelArgInfo(
    cl_kernel kernel,
    int arg_indx,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetKernelArgInfo(
      kernel,
      arg_indx,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetKernelArgInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_kernel,
              cl_uint,
              cl_kernel_arg_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetKernelArgInfo');
  late final _clGetKernelArgInfo = _clGetKernelArgInfoPtr.asFunction<
      int Function(cl_kernel, int, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int clGetKernelWorkGroupInfo(
    cl_kernel kernel,
    cl_device_id device,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetKernelWorkGroupInfo(
      kernel,
      device,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetKernelWorkGroupInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_kernel,
              cl_device_id,
              cl_kernel_work_group_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetKernelWorkGroupInfo');
  late final _clGetKernelWorkGroupInfo =
      _clGetKernelWorkGroupInfoPtr.asFunction<
          int Function(cl_kernel, cl_device_id, int, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>();

  int clGetKernelSubGroupInfo(
    cl_kernel kernel,
    cl_device_id device,
    int param_name,
    int input_value_size,
    ffi.Pointer<ffi.Void> input_value,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetKernelSubGroupInfo(
      kernel,
      device,
      param_name,
      input_value_size,
      input_value,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetKernelSubGroupInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_kernel,
              cl_device_id,
              cl_kernel_sub_group_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetKernelSubGroupInfo');
  late final _clGetKernelSubGroupInfo = _clGetKernelSubGroupInfoPtr.asFunction<
      int Function(cl_kernel, cl_device_id, int, int, ffi.Pointer<ffi.Void>,
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int clWaitForEvents(
    int num_events,
    ffi.Pointer<cl_event> event_list,
  ) {
    return _clWaitForEvents(
      num_events,
      event_list,
    );
  }

  late final _clWaitForEventsPtr = _lookup<
          ffi.NativeFunction<cl_int Function(cl_uint, ffi.Pointer<cl_event>)>>(
      'clWaitForEvents');
  late final _clWaitForEvents = _clWaitForEventsPtr
      .asFunction<int Function(int, ffi.Pointer<cl_event>)>();

  int clGetEventInfo(
    cl_event event,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetEventInfo(
      event,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetEventInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_event, cl_event_info, ffi.Size,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>>('clGetEventInfo');
  late final _clGetEventInfo = _clGetEventInfoPtr.asFunction<
      int Function(
          cl_event, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  cl_event clCreateUserEvent(
    cl_context context,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateUserEvent(
      context,
      errcode_ret,
    );
  }

  late final _clCreateUserEventPtr = _lookup<
      ffi.NativeFunction<
          cl_event Function(
              cl_context, ffi.Pointer<cl_int>)>>('clCreateUserEvent');
  late final _clCreateUserEvent = _clCreateUserEventPtr
      .asFunction<cl_event Function(cl_context, ffi.Pointer<cl_int>)>();

  int clRetainEvent(
    cl_event event,
  ) {
    return _clRetainEvent(
      event,
    );
  }

  late final _clRetainEventPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_event)>>('clRetainEvent');
  late final _clRetainEvent =
      _clRetainEventPtr.asFunction<int Function(cl_event)>();

  int clReleaseEvent(
    cl_event event,
  ) {
    return _clReleaseEvent(
      event,
    );
  }

  late final _clReleaseEventPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_event)>>('clReleaseEvent');
  late final _clReleaseEvent =
      _clReleaseEventPtr.asFunction<int Function(cl_event)>();

  int clSetUserEventStatus(
    cl_event event,
    int execution_status,
  ) {
    return _clSetUserEventStatus(
      event,
      execution_status,
    );
  }

  late final _clSetUserEventStatusPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_event, cl_int)>>(
          'clSetUserEventStatus');
  late final _clSetUserEventStatus =
      _clSetUserEventStatusPtr.asFunction<int Function(cl_event, int)>();

  int clSetEventCallback(
    cl_event event,
    int command_exec_callback_type,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(cl_event, cl_int, ffi.Pointer<ffi.Void>)>>
        pfn_notify,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _clSetEventCallback(
      event,
      command_exec_callback_type,
      pfn_notify,
      user_data,
    );
  }

  late final _clSetEventCallbackPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_event,
              cl_int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          cl_event, cl_int, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('clSetEventCallback');
  late final _clSetEventCallback = _clSetEventCallbackPtr.asFunction<
      int Function(
          cl_event,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(cl_event, cl_int, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  int clGetEventProfilingInfo(
    cl_event event,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetEventProfilingInfo(
      event,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetEventProfilingInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_event,
              cl_profiling_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetEventProfilingInfo');
  late final _clGetEventProfilingInfo = _clGetEventProfilingInfoPtr.asFunction<
      int Function(
          cl_event, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int clFlush(
    cl_command_queue command_queue,
  ) {
    return _clFlush(
      command_queue,
    );
  }

  late final _clFlushPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_command_queue)>>('clFlush');
  late final _clFlush =
      _clFlushPtr.asFunction<int Function(cl_command_queue)>();

  int clFinish(
    cl_command_queue command_queue,
  ) {
    return _clFinish(
      command_queue,
    );
  }

  late final _clFinishPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_command_queue)>>(
          'clFinish');
  late final _clFinish =
      _clFinishPtr.asFunction<int Function(cl_command_queue)>();

  int clEnqueueReadBuffer(
    cl_command_queue command_queue,
    cl_mem buffer,
    int blocking_read,
    int offset,
    int size,
    ffi.Pointer<ffi.Void> ptr,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueReadBuffer(
      command_queue,
      buffer,
      blocking_read,
      offset,
      size,
      ptr,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueReadBufferPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              cl_bool,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueReadBuffer');
  late final _clEnqueueReadBuffer = _clEnqueueReadBufferPtr.asFunction<
      int Function(
          cl_command_queue,
          cl_mem,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueReadBufferRect(
    cl_command_queue command_queue,
    cl_mem buffer,
    int blocking_read,
    ffi.Pointer<ffi.Size> buffer_origin,
    ffi.Pointer<ffi.Size> host_origin,
    ffi.Pointer<ffi.Size> region,
    int buffer_row_pitch,
    int buffer_slice_pitch,
    int host_row_pitch,
    int host_slice_pitch,
    ffi.Pointer<ffi.Void> ptr,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueReadBufferRect(
      command_queue,
      buffer,
      blocking_read,
      buffer_origin,
      host_origin,
      region,
      buffer_row_pitch,
      buffer_slice_pitch,
      host_row_pitch,
      host_slice_pitch,
      ptr,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueReadBufferRectPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              cl_bool,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueReadBufferRect');
  late final _clEnqueueReadBufferRect = _clEnqueueReadBufferRectPtr.asFunction<
      int Function(
          cl_command_queue,
          cl_mem,
          int,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueWriteBuffer(
    cl_command_queue command_queue,
    cl_mem buffer,
    int blocking_write,
    int offset,
    int size,
    ffi.Pointer<ffi.Void> ptr,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueWriteBuffer(
      command_queue,
      buffer,
      blocking_write,
      offset,
      size,
      ptr,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueWriteBufferPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              cl_bool,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueWriteBuffer');
  late final _clEnqueueWriteBuffer = _clEnqueueWriteBufferPtr.asFunction<
      int Function(
          cl_command_queue,
          cl_mem,
          int,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueWriteBufferRect(
    cl_command_queue command_queue,
    cl_mem buffer,
    int blocking_write,
    ffi.Pointer<ffi.Size> buffer_origin,
    ffi.Pointer<ffi.Size> host_origin,
    ffi.Pointer<ffi.Size> region,
    int buffer_row_pitch,
    int buffer_slice_pitch,
    int host_row_pitch,
    int host_slice_pitch,
    ffi.Pointer<ffi.Void> ptr,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueWriteBufferRect(
      command_queue,
      buffer,
      blocking_write,
      buffer_origin,
      host_origin,
      region,
      buffer_row_pitch,
      buffer_slice_pitch,
      host_row_pitch,
      host_slice_pitch,
      ptr,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueWriteBufferRectPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              cl_bool,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueWriteBufferRect');
  late final _clEnqueueWriteBufferRect =
      _clEnqueueWriteBufferRectPtr.asFunction<
          int Function(
              cl_command_queue,
              cl_mem,
              int,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              int,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>();

  int clEnqueueFillBuffer(
    cl_command_queue command_queue,
    cl_mem buffer,
    ffi.Pointer<ffi.Void> pattern,
    int pattern_size,
    int offset,
    int size,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueFillBuffer(
      command_queue,
      buffer,
      pattern,
      pattern_size,
      offset,
      size,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueFillBufferPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueFillBuffer');
  late final _clEnqueueFillBuffer = _clEnqueueFillBufferPtr.asFunction<
      int Function(cl_command_queue, cl_mem, ffi.Pointer<ffi.Void>, int, int,
          int, int, ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>();

  int clEnqueueCopyBuffer(
    cl_command_queue command_queue,
    cl_mem src_buffer,
    cl_mem dst_buffer,
    int src_offset,
    int dst_offset,
    int size,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueCopyBuffer(
      command_queue,
      src_buffer,
      dst_buffer,
      src_offset,
      dst_offset,
      size,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueCopyBufferPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              cl_mem,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueCopyBuffer');
  late final _clEnqueueCopyBuffer = _clEnqueueCopyBufferPtr.asFunction<
      int Function(cl_command_queue, cl_mem, cl_mem, int, int, int, int,
          ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>();

  int clEnqueueCopyBufferRect(
    cl_command_queue command_queue,
    cl_mem src_buffer,
    cl_mem dst_buffer,
    ffi.Pointer<ffi.Size> src_origin,
    ffi.Pointer<ffi.Size> dst_origin,
    ffi.Pointer<ffi.Size> region,
    int src_row_pitch,
    int src_slice_pitch,
    int dst_row_pitch,
    int dst_slice_pitch,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueCopyBufferRect(
      command_queue,
      src_buffer,
      dst_buffer,
      src_origin,
      dst_origin,
      region,
      src_row_pitch,
      src_slice_pitch,
      dst_row_pitch,
      dst_slice_pitch,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueCopyBufferRectPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              cl_mem,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueCopyBufferRect');
  late final _clEnqueueCopyBufferRect = _clEnqueueCopyBufferRectPtr.asFunction<
      int Function(
          cl_command_queue,
          cl_mem,
          cl_mem,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueReadImage(
    cl_command_queue command_queue,
    cl_mem image,
    int blocking_read,
    ffi.Pointer<ffi.Size> origin,
    ffi.Pointer<ffi.Size> region,
    int row_pitch,
    int slice_pitch,
    ffi.Pointer<ffi.Void> ptr,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueReadImage(
      command_queue,
      image,
      blocking_read,
      origin,
      region,
      row_pitch,
      slice_pitch,
      ptr,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueReadImagePtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              cl_bool,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueReadImage');
  late final _clEnqueueReadImage = _clEnqueueReadImagePtr.asFunction<
      int Function(
          cl_command_queue,
          cl_mem,
          int,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueWriteImage(
    cl_command_queue command_queue,
    cl_mem image,
    int blocking_write,
    ffi.Pointer<ffi.Size> origin,
    ffi.Pointer<ffi.Size> region,
    int input_row_pitch,
    int input_slice_pitch,
    ffi.Pointer<ffi.Void> ptr,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueWriteImage(
      command_queue,
      image,
      blocking_write,
      origin,
      region,
      input_row_pitch,
      input_slice_pitch,
      ptr,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueWriteImagePtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              cl_bool,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueWriteImage');
  late final _clEnqueueWriteImage = _clEnqueueWriteImagePtr.asFunction<
      int Function(
          cl_command_queue,
          cl_mem,
          int,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueFillImage(
    cl_command_queue command_queue,
    cl_mem image,
    ffi.Pointer<ffi.Void> fill_color,
    ffi.Pointer<ffi.Size> origin,
    ffi.Pointer<ffi.Size> region,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueFillImage(
      command_queue,
      image,
      fill_color,
      origin,
      region,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueFillImagePtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueFillImage');
  late final _clEnqueueFillImage = _clEnqueueFillImagePtr.asFunction<
      int Function(
          cl_command_queue,
          cl_mem,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueCopyImage(
    cl_command_queue command_queue,
    cl_mem src_image,
    cl_mem dst_image,
    ffi.Pointer<ffi.Size> src_origin,
    ffi.Pointer<ffi.Size> dst_origin,
    ffi.Pointer<ffi.Size> region,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueCopyImage(
      command_queue,
      src_image,
      dst_image,
      src_origin,
      dst_origin,
      region,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueCopyImagePtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              cl_mem,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueCopyImage');
  late final _clEnqueueCopyImage = _clEnqueueCopyImagePtr.asFunction<
      int Function(
          cl_command_queue,
          cl_mem,
          cl_mem,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueCopyImageToBuffer(
    cl_command_queue command_queue,
    cl_mem src_image,
    cl_mem dst_buffer,
    ffi.Pointer<ffi.Size> src_origin,
    ffi.Pointer<ffi.Size> region,
    int dst_offset,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueCopyImageToBuffer(
      command_queue,
      src_image,
      dst_buffer,
      src_origin,
      region,
      dst_offset,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueCopyImageToBufferPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              cl_mem,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueCopyImageToBuffer');
  late final _clEnqueueCopyImageToBuffer =
      _clEnqueueCopyImageToBufferPtr.asFunction<
          int Function(
              cl_command_queue,
              cl_mem,
              cl_mem,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              int,
              int,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>();

  int clEnqueueCopyBufferToImage(
    cl_command_queue command_queue,
    cl_mem src_buffer,
    cl_mem dst_image,
    int src_offset,
    ffi.Pointer<ffi.Size> dst_origin,
    ffi.Pointer<ffi.Size> region,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueCopyBufferToImage(
      command_queue,
      src_buffer,
      dst_image,
      src_offset,
      dst_origin,
      region,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueCopyBufferToImagePtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              cl_mem,
              ffi.Size,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueCopyBufferToImage');
  late final _clEnqueueCopyBufferToImage =
      _clEnqueueCopyBufferToImagePtr.asFunction<
          int Function(
              cl_command_queue,
              cl_mem,
              cl_mem,
              int,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              int,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>();

  ffi.Pointer<ffi.Void> clEnqueueMapBuffer(
    cl_command_queue command_queue,
    cl_mem buffer,
    int blocking_map,
    int map_flags,
    int offset,
    int size,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clEnqueueMapBuffer(
      command_queue,
      buffer,
      blocking_map,
      map_flags,
      offset,
      size,
      num_events_in_wait_list,
      event_wait_list,
      event,
      errcode_ret,
    );
  }

  late final _clEnqueueMapBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              cl_command_queue,
              cl_mem,
              cl_bool,
              cl_map_flags,
              ffi.Size,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_int>)>>('clEnqueueMapBuffer');
  late final _clEnqueueMapBuffer = _clEnqueueMapBufferPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          cl_command_queue,
          cl_mem,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_int>)>();

  ffi.Pointer<ffi.Void> clEnqueueMapImage(
    cl_command_queue command_queue,
    cl_mem image,
    int blocking_map,
    int map_flags,
    ffi.Pointer<ffi.Size> origin,
    ffi.Pointer<ffi.Size> region,
    ffi.Pointer<ffi.Size> image_row_pitch,
    ffi.Pointer<ffi.Size> image_slice_pitch,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clEnqueueMapImage(
      command_queue,
      image,
      blocking_map,
      map_flags,
      origin,
      region,
      image_row_pitch,
      image_slice_pitch,
      num_events_in_wait_list,
      event_wait_list,
      event,
      errcode_ret,
    );
  }

  late final _clEnqueueMapImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              cl_command_queue,
              cl_mem,
              cl_bool,
              cl_map_flags,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_int>)>>('clEnqueueMapImage');
  late final _clEnqueueMapImage = _clEnqueueMapImagePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          cl_command_queue,
          cl_mem,
          int,
          int,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_int>)>();

  int clEnqueueUnmapMemObject(
    cl_command_queue command_queue,
    cl_mem memobj,
    ffi.Pointer<ffi.Void> mapped_ptr,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueUnmapMemObject(
      command_queue,
      memobj,
      mapped_ptr,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueUnmapMemObjectPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              ffi.Pointer<ffi.Void>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueUnmapMemObject');
  late final _clEnqueueUnmapMemObject = _clEnqueueUnmapMemObjectPtr.asFunction<
      int Function(cl_command_queue, cl_mem, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>();

  int clEnqueueMigrateMemObjects(
    cl_command_queue command_queue,
    int num_mem_objects,
    ffi.Pointer<cl_mem> mem_objects,
    int flags,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueMigrateMemObjects(
      command_queue,
      num_mem_objects,
      mem_objects,
      flags,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueMigrateMemObjectsPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_uint,
              ffi.Pointer<cl_mem>,
              cl_mem_migration_flags,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueMigrateMemObjects');
  late final _clEnqueueMigrateMemObjects =
      _clEnqueueMigrateMemObjectsPtr.asFunction<
          int Function(cl_command_queue, int, ffi.Pointer<cl_mem>, int, int,
              ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>();

  int clEnqueueNDRangeKernel(
    cl_command_queue command_queue,
    cl_kernel kernel,
    int work_dim,
    ffi.Pointer<ffi.Size> global_work_offset,
    ffi.Pointer<ffi.Size> global_work_size,
    ffi.Pointer<ffi.Size> local_work_size,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueNDRangeKernel(
      command_queue,
      kernel,
      work_dim,
      global_work_offset,
      global_work_size,
      local_work_size,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueNDRangeKernelPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_kernel,
              cl_uint,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueNDRangeKernel');
  late final _clEnqueueNDRangeKernel = _clEnqueueNDRangeKernelPtr.asFunction<
      int Function(
          cl_command_queue,
          cl_kernel,
          int,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueNativeKernel(
    cl_command_queue command_queue,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        user_func,
    ffi.Pointer<ffi.Void> args,
    int cb_args,
    int num_mem_objects,
    ffi.Pointer<cl_mem> mem_list,
    ffi.Pointer<ffi.Pointer<ffi.Void>> args_mem_loc,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueNativeKernel(
      command_queue,
      user_func,
      args,
      cb_args,
      num_mem_objects,
      mem_list,
      args_mem_loc,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueNativeKernelPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_mem>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueNativeKernel');
  late final _clEnqueueNativeKernel = _clEnqueueNativeKernelPtr.asFunction<
      int Function(
          cl_command_queue,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<cl_mem>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueMarkerWithWaitList(
    cl_command_queue command_queue,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueMarkerWithWaitList(
      command_queue,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueMarkerWithWaitListPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_command_queue, cl_uint, ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueMarkerWithWaitList');
  late final _clEnqueueMarkerWithWaitList =
      _clEnqueueMarkerWithWaitListPtr.asFunction<
          int Function(cl_command_queue, int, ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>();

  int clEnqueueBarrierWithWaitList(
    cl_command_queue command_queue,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueBarrierWithWaitList(
      command_queue,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueBarrierWithWaitListPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_command_queue, cl_uint, ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueBarrierWithWaitList');
  late final _clEnqueueBarrierWithWaitList =
      _clEnqueueBarrierWithWaitListPtr.asFunction<
          int Function(cl_command_queue, int, ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>();

  int clEnqueueSVMFree(
    cl_command_queue command_queue,
    int num_svm_pointers,
    ffi.Pointer<ffi.Pointer<ffi.Void>> svm_pointers,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(cl_command_queue, cl_uint,
                    ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Void>)>>
        pfn_free_func,
    ffi.Pointer<ffi.Void> user_data,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueSVMFree(
      command_queue,
      num_svm_pointers,
      svm_pointers,
      pfn_free_func,
      user_data,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueSVMFreePtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_uint,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          cl_command_queue,
                          cl_uint,
                          ffi.Pointer<ffi.Pointer<ffi.Void>>,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueSVMFree');
  late final _clEnqueueSVMFree = _clEnqueueSVMFreePtr.asFunction<
      int Function(
          cl_command_queue,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      cl_command_queue,
                      cl_uint,
                      ffi.Pointer<ffi.Pointer<ffi.Void>>,
                      ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueSVMMemcpy(
    cl_command_queue command_queue,
    int blocking_copy,
    ffi.Pointer<ffi.Void> dst_ptr,
    ffi.Pointer<ffi.Void> src_ptr,
    int size,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueSVMMemcpy(
      command_queue,
      blocking_copy,
      dst_ptr,
      src_ptr,
      size,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueSVMMemcpyPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_bool,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueSVMMemcpy');
  late final _clEnqueueSVMMemcpy = _clEnqueueSVMMemcpyPtr.asFunction<
      int Function(
          cl_command_queue,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueSVMMemFill(
    cl_command_queue command_queue,
    ffi.Pointer<ffi.Void> svm_ptr,
    ffi.Pointer<ffi.Void> pattern,
    int pattern_size,
    int size,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueSVMMemFill(
      command_queue,
      svm_ptr,
      pattern,
      pattern_size,
      size,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueSVMMemFillPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueSVMMemFill');
  late final _clEnqueueSVMMemFill = _clEnqueueSVMMemFillPtr.asFunction<
      int Function(
          cl_command_queue,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueSVMMap(
    cl_command_queue command_queue,
    int blocking_map,
    int flags,
    ffi.Pointer<ffi.Void> svm_ptr,
    int size,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueSVMMap(
      command_queue,
      blocking_map,
      flags,
      svm_ptr,
      size,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueSVMMapPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_bool,
              cl_map_flags,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueSVMMap');
  late final _clEnqueueSVMMap = _clEnqueueSVMMapPtr.asFunction<
      int Function(cl_command_queue, int, int, ffi.Pointer<ffi.Void>, int, int,
          ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>();

  int clEnqueueSVMUnmap(
    cl_command_queue command_queue,
    ffi.Pointer<ffi.Void> svm_ptr,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueSVMUnmap(
      command_queue,
      svm_ptr,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueSVMUnmapPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              ffi.Pointer<ffi.Void>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueSVMUnmap');
  late final _clEnqueueSVMUnmap = _clEnqueueSVMUnmapPtr.asFunction<
      int Function(cl_command_queue, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>();

  int clEnqueueSVMMigrateMem(
    cl_command_queue command_queue,
    int num_svm_pointers,
    ffi.Pointer<ffi.Pointer<ffi.Void>> svm_pointers,
    ffi.Pointer<ffi.Size> sizes,
    int flags,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueSVMMigrateMem(
      command_queue,
      num_svm_pointers,
      svm_pointers,
      sizes,
      flags,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueSVMMigrateMemPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_uint,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>,
              cl_mem_migration_flags,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueSVMMigrateMem');
  late final _clEnqueueSVMMigrateMem = _clEnqueueSVMMigrateMemPtr.asFunction<
      int Function(
          cl_command_queue,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Size>,
          int,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  ffi.Pointer<ffi.Void> clGetExtensionFunctionAddressForPlatform(
    cl_platform_id platform,
    ffi.Pointer<ffi.Char> func_name,
  ) {
    return _clGetExtensionFunctionAddressForPlatform(
      platform,
      func_name,
    );
  }

  late final _clGetExtensionFunctionAddressForPlatformPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  cl_platform_id, ffi.Pointer<ffi.Char>)>>(
      'clGetExtensionFunctionAddressForPlatform');
  late final _clGetExtensionFunctionAddressForPlatform =
      _clGetExtensionFunctionAddressForPlatformPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              cl_platform_id, ffi.Pointer<ffi.Char>)>();

  cl_mem clCreateImage2D(
    cl_context context,
    int flags,
    ffi.Pointer<cl_image_format> image_format,
    int image_width,
    int image_height,
    int image_row_pitch,
    ffi.Pointer<ffi.Void> host_ptr,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateImage2D(
      context,
      flags,
      image_format,
      image_width,
      image_height,
      image_row_pitch,
      host_ptr,
      errcode_ret,
    );
  }

  late final _clCreateImage2DPtr = _lookup<
      ffi.NativeFunction<
          cl_mem Function(
              cl_context,
              cl_mem_flags,
              ffi.Pointer<cl_image_format>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<cl_int>)>>('clCreateImage2D');
  late final _clCreateImage2D = _clCreateImage2DPtr.asFunction<
      cl_mem Function(cl_context, int, ffi.Pointer<cl_image_format>, int, int,
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<cl_int>)>();

  cl_mem clCreateImage3D(
    cl_context context,
    int flags,
    ffi.Pointer<cl_image_format> image_format,
    int image_width,
    int image_height,
    int image_depth,
    int image_row_pitch,
    int image_slice_pitch,
    ffi.Pointer<ffi.Void> host_ptr,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateImage3D(
      context,
      flags,
      image_format,
      image_width,
      image_height,
      image_depth,
      image_row_pitch,
      image_slice_pitch,
      host_ptr,
      errcode_ret,
    );
  }

  late final _clCreateImage3DPtr = _lookup<
      ffi.NativeFunction<
          cl_mem Function(
              cl_context,
              cl_mem_flags,
              ffi.Pointer<cl_image_format>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<cl_int>)>>('clCreateImage3D');
  late final _clCreateImage3D = _clCreateImage3DPtr.asFunction<
      cl_mem Function(cl_context, int, ffi.Pointer<cl_image_format>, int, int,
          int, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<cl_int>)>();

  int clEnqueueMarker(
    cl_command_queue command_queue,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueMarker(
      command_queue,
      event,
    );
  }

  late final _clEnqueueMarkerPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue, ffi.Pointer<cl_event>)>>('clEnqueueMarker');
  late final _clEnqueueMarker = _clEnqueueMarkerPtr
      .asFunction<int Function(cl_command_queue, ffi.Pointer<cl_event>)>();

  int clEnqueueWaitForEvents(
    cl_command_queue command_queue,
    int num_events,
    ffi.Pointer<cl_event> event_list,
  ) {
    return _clEnqueueWaitForEvents(
      command_queue,
      num_events,
      event_list,
    );
  }

  late final _clEnqueueWaitForEventsPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_command_queue, cl_uint,
              ffi.Pointer<cl_event>)>>('clEnqueueWaitForEvents');
  late final _clEnqueueWaitForEvents = _clEnqueueWaitForEventsPtr
      .asFunction<int Function(cl_command_queue, int, ffi.Pointer<cl_event>)>();

  int clEnqueueBarrier(
    cl_command_queue command_queue,
  ) {
    return _clEnqueueBarrier(
      command_queue,
    );
  }

  late final _clEnqueueBarrierPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_command_queue)>>(
          'clEnqueueBarrier');
  late final _clEnqueueBarrier =
      _clEnqueueBarrierPtr.asFunction<int Function(cl_command_queue)>();

  int clUnloadCompiler() {
    return _clUnloadCompiler();
  }

  late final _clUnloadCompilerPtr =
      _lookup<ffi.NativeFunction<cl_int Function()>>('clUnloadCompiler');
  late final _clUnloadCompiler =
      _clUnloadCompilerPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Void> clGetExtensionFunctionAddress(
    ffi.Pointer<ffi.Char> func_name,
  ) {
    return _clGetExtensionFunctionAddress(
      func_name,
    );
  }

  late final _clGetExtensionFunctionAddressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Char>)>>('clGetExtensionFunctionAddress');
  late final _clGetExtensionFunctionAddress = _clGetExtensionFunctionAddressPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>)>();

  cl_command_queue clCreateCommandQueue(
    cl_context context,
    cl_device_id device,
    int properties,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateCommandQueue(
      context,
      device,
      properties,
      errcode_ret,
    );
  }

  late final _clCreateCommandQueuePtr = _lookup<
      ffi.NativeFunction<
          cl_command_queue Function(
              cl_context,
              cl_device_id,
              cl_command_queue_properties,
              ffi.Pointer<cl_int>)>>('clCreateCommandQueue');
  late final _clCreateCommandQueue = _clCreateCommandQueuePtr.asFunction<
      cl_command_queue Function(
          cl_context, cl_device_id, int, ffi.Pointer<cl_int>)>();

  cl_sampler clCreateSampler(
    cl_context context,
    int normalized_coords,
    int addressing_mode,
    int filter_mode,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateSampler(
      context,
      normalized_coords,
      addressing_mode,
      filter_mode,
      errcode_ret,
    );
  }

  late final _clCreateSamplerPtr = _lookup<
      ffi.NativeFunction<
          cl_sampler Function(cl_context, cl_bool, cl_addressing_mode,
              cl_filter_mode, ffi.Pointer<cl_int>)>>('clCreateSampler');
  late final _clCreateSampler = _clCreateSamplerPtr.asFunction<
      cl_sampler Function(cl_context, int, int, int, ffi.Pointer<cl_int>)>();

  int clEnqueueTask(
    cl_command_queue command_queue,
    cl_kernel kernel,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueTask(
      command_queue,
      kernel,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueTaskPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_command_queue, cl_kernel, cl_uint,
              ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>>('clEnqueueTask');
  late final _clEnqueueTask = _clEnqueueTaskPtr.asFunction<
      int Function(cl_command_queue, cl_kernel, int, ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  cl_mem clCreateFromGLBuffer(
    cl_context context,
    int flags,
    int bufobj,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateFromGLBuffer(
      context,
      flags,
      bufobj,
      errcode_ret,
    );
  }

  late final _clCreateFromGLBufferPtr = _lookup<
      ffi.NativeFunction<
          cl_mem Function(cl_context, cl_mem_flags, cl_GLuint,
              ffi.Pointer<cl_int>)>>('clCreateFromGLBuffer');
  late final _clCreateFromGLBuffer = _clCreateFromGLBufferPtr
      .asFunction<cl_mem Function(cl_context, int, int, ffi.Pointer<cl_int>)>();

  cl_mem clCreateFromGLTexture(
    cl_context context,
    int flags,
    int target,
    int miplevel,
    int texture,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateFromGLTexture(
      context,
      flags,
      target,
      miplevel,
      texture,
      errcode_ret,
    );
  }

  late final _clCreateFromGLTexturePtr = _lookup<
      ffi.NativeFunction<
          cl_mem Function(cl_context, cl_mem_flags, cl_GLenum, cl_GLint,
              cl_GLuint, ffi.Pointer<cl_int>)>>('clCreateFromGLTexture');
  late final _clCreateFromGLTexture = _clCreateFromGLTexturePtr.asFunction<
      cl_mem Function(cl_context, int, int, int, int, ffi.Pointer<cl_int>)>();

  cl_mem clCreateFromGLRenderbuffer(
    cl_context context,
    int flags,
    int renderbuffer,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateFromGLRenderbuffer(
      context,
      flags,
      renderbuffer,
      errcode_ret,
    );
  }

  late final _clCreateFromGLRenderbufferPtr = _lookup<
      ffi.NativeFunction<
          cl_mem Function(cl_context, cl_mem_flags, cl_GLuint,
              ffi.Pointer<cl_int>)>>('clCreateFromGLRenderbuffer');
  late final _clCreateFromGLRenderbuffer = _clCreateFromGLRenderbufferPtr
      .asFunction<cl_mem Function(cl_context, int, int, ffi.Pointer<cl_int>)>();

  int clGetGLObjectInfo(
    cl_mem memobj,
    ffi.Pointer<cl_gl_object_type> gl_object_type,
    ffi.Pointer<cl_GLuint> gl_object_name,
  ) {
    return _clGetGLObjectInfo(
      memobj,
      gl_object_type,
      gl_object_name,
    );
  }

  late final _clGetGLObjectInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_mem, ffi.Pointer<cl_gl_object_type>,
              ffi.Pointer<cl_GLuint>)>>('clGetGLObjectInfo');
  late final _clGetGLObjectInfo = _clGetGLObjectInfoPtr.asFunction<
      int Function(
          cl_mem, ffi.Pointer<cl_gl_object_type>, ffi.Pointer<cl_GLuint>)>();

  int clGetGLTextureInfo(
    cl_mem memobj,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetGLTextureInfo(
      memobj,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetGLTextureInfoPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_mem,
              cl_gl_texture_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetGLTextureInfo');
  late final _clGetGLTextureInfo = _clGetGLTextureInfoPtr.asFunction<
      int Function(
          cl_mem, int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int clEnqueueAcquireGLObjects(
    cl_command_queue command_queue,
    int num_objects,
    ffi.Pointer<cl_mem> mem_objects,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueAcquireGLObjects(
      command_queue,
      num_objects,
      mem_objects,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueAcquireGLObjectsPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_uint,
              ffi.Pointer<cl_mem>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueAcquireGLObjects');
  late final _clEnqueueAcquireGLObjects =
      _clEnqueueAcquireGLObjectsPtr.asFunction<
          int Function(cl_command_queue, int, ffi.Pointer<cl_mem>, int,
              ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>();

  int clEnqueueReleaseGLObjects(
    cl_command_queue command_queue,
    int num_objects,
    ffi.Pointer<cl_mem> mem_objects,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueReleaseGLObjects(
      command_queue,
      num_objects,
      mem_objects,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueReleaseGLObjectsPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_uint,
              ffi.Pointer<cl_mem>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueReleaseGLObjects');
  late final _clEnqueueReleaseGLObjects =
      _clEnqueueReleaseGLObjectsPtr.asFunction<
          int Function(cl_command_queue, int, ffi.Pointer<cl_mem>, int,
              ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>();

  cl_mem clCreateFromGLTexture2D(
    cl_context context,
    int flags,
    int target,
    int miplevel,
    int texture,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateFromGLTexture2D(
      context,
      flags,
      target,
      miplevel,
      texture,
      errcode_ret,
    );
  }

  late final _clCreateFromGLTexture2DPtr = _lookup<
      ffi.NativeFunction<
          cl_mem Function(cl_context, cl_mem_flags, cl_GLenum, cl_GLint,
              cl_GLuint, ffi.Pointer<cl_int>)>>('clCreateFromGLTexture2D');
  late final _clCreateFromGLTexture2D = _clCreateFromGLTexture2DPtr.asFunction<
      cl_mem Function(cl_context, int, int, int, int, ffi.Pointer<cl_int>)>();

  cl_mem clCreateFromGLTexture3D(
    cl_context context,
    int flags,
    int target,
    int miplevel,
    int texture,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateFromGLTexture3D(
      context,
      flags,
      target,
      miplevel,
      texture,
      errcode_ret,
    );
  }

  late final _clCreateFromGLTexture3DPtr = _lookup<
      ffi.NativeFunction<
          cl_mem Function(cl_context, cl_mem_flags, cl_GLenum, cl_GLint,
              cl_GLuint, ffi.Pointer<cl_int>)>>('clCreateFromGLTexture3D');
  late final _clCreateFromGLTexture3D = _clCreateFromGLTexture3DPtr.asFunction<
      cl_mem Function(cl_context, int, int, int, int, ffi.Pointer<cl_int>)>();

  int clGetGLContextInfoKHR(
    ffi.Pointer<cl_context_properties> properties,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetGLContextInfoKHR(
      properties,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetGLContextInfoKHRPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              ffi.Pointer<cl_context_properties>,
              cl_gl_context_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetGLContextInfoKHR');
  late final _clGetGLContextInfoKHR = _clGetGLContextInfoKHRPtr.asFunction<
      int Function(ffi.Pointer<cl_context_properties>, int, int,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  cl_event clCreateEventFromGLsyncKHR(
    cl_context context,
    cl_GLsync sync1,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateEventFromGLsyncKHR(
      context,
      sync1,
      errcode_ret,
    );
  }

  late final _clCreateEventFromGLsyncKHRPtr = _lookup<
      ffi.NativeFunction<
          cl_event Function(cl_context, cl_GLsync,
              ffi.Pointer<cl_int>)>>('clCreateEventFromGLsyncKHR');
  late final _clCreateEventFromGLsyncKHR =
      _clCreateEventFromGLsyncKHRPtr.asFunction<
          cl_event Function(cl_context, cl_GLsync, ffi.Pointer<cl_int>)>();

  int clGetSupportedGLTextureFormatsINTEL(
    cl_context context,
    int flags,
    int image_type,
    int num_entries,
    ffi.Pointer<cl_GLenum> gl_formats,
    ffi.Pointer<cl_uint> num_texture_formats,
  ) {
    return _clGetSupportedGLTextureFormatsINTEL(
      context,
      flags,
      image_type,
      num_entries,
      gl_formats,
      num_texture_formats,
    );
  }

  late final _clGetSupportedGLTextureFormatsINTELPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_context,
              cl_mem_flags,
              cl_mem_object_type,
              cl_uint,
              ffi.Pointer<cl_GLenum>,
              ffi.Pointer<cl_uint>)>>('clGetSupportedGLTextureFormatsINTEL');
  late final _clGetSupportedGLTextureFormatsINTEL =
      _clGetSupportedGLTextureFormatsINTELPtr.asFunction<
          int Function(cl_context, int, int, int, ffi.Pointer<cl_GLenum>,
              ffi.Pointer<cl_uint>)>();

  cl_command_buffer_khr clCreateCommandBufferKHR(
    int num_queues,
    ffi.Pointer<cl_command_queue> queues,
    ffi.Pointer<cl_command_buffer_properties_khr> properties,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateCommandBufferKHR(
      num_queues,
      queues,
      properties,
      errcode_ret,
    );
  }

  late final _clCreateCommandBufferKHRPtr = _lookup<
      ffi.NativeFunction<
          cl_command_buffer_khr Function(
              cl_uint,
              ffi.Pointer<cl_command_queue>,
              ffi.Pointer<cl_command_buffer_properties_khr>,
              ffi.Pointer<cl_int>)>>('clCreateCommandBufferKHR');
  late final _clCreateCommandBufferKHR =
      _clCreateCommandBufferKHRPtr.asFunction<
          cl_command_buffer_khr Function(
              int,
              ffi.Pointer<cl_command_queue>,
              ffi.Pointer<cl_command_buffer_properties_khr>,
              ffi.Pointer<cl_int>)>();

  int clFinalizeCommandBufferKHR(
    cl_command_buffer_khr command_buffer,
  ) {
    return _clFinalizeCommandBufferKHR(
      command_buffer,
    );
  }

  late final _clFinalizeCommandBufferKHRPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_command_buffer_khr)>>(
          'clFinalizeCommandBufferKHR');
  late final _clFinalizeCommandBufferKHR = _clFinalizeCommandBufferKHRPtr
      .asFunction<int Function(cl_command_buffer_khr)>();

  int clRetainCommandBufferKHR(
    cl_command_buffer_khr command_buffer,
  ) {
    return _clRetainCommandBufferKHR(
      command_buffer,
    );
  }

  late final _clRetainCommandBufferKHRPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_command_buffer_khr)>>(
          'clRetainCommandBufferKHR');
  late final _clRetainCommandBufferKHR = _clRetainCommandBufferKHRPtr
      .asFunction<int Function(cl_command_buffer_khr)>();

  int clReleaseCommandBufferKHR(
    cl_command_buffer_khr command_buffer,
  ) {
    return _clReleaseCommandBufferKHR(
      command_buffer,
    );
  }

  late final _clReleaseCommandBufferKHRPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_command_buffer_khr)>>(
          'clReleaseCommandBufferKHR');
  late final _clReleaseCommandBufferKHR = _clReleaseCommandBufferKHRPtr
      .asFunction<int Function(cl_command_buffer_khr)>();

  int clEnqueueCommandBufferKHR(
    int num_queues,
    ffi.Pointer<cl_command_queue> queues,
    cl_command_buffer_khr command_buffer,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueCommandBufferKHR(
      num_queues,
      queues,
      command_buffer,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueCommandBufferKHRPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_uint,
              ffi.Pointer<cl_command_queue>,
              cl_command_buffer_khr,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueCommandBufferKHR');
  late final _clEnqueueCommandBufferKHR =
      _clEnqueueCommandBufferKHRPtr.asFunction<
          int Function(
              int,
              ffi.Pointer<cl_command_queue>,
              cl_command_buffer_khr,
              int,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>();

  int clCommandBarrierWithWaitListKHR(
    cl_command_buffer_khr command_buffer,
    cl_command_queue command_queue,
    int num_sync_points_in_wait_list,
    ffi.Pointer<cl_sync_point_khr> sync_point_wait_list,
    ffi.Pointer<cl_sync_point_khr> sync_point,
    ffi.Pointer<cl_mutable_command_khr> mutable_handle,
  ) {
    return _clCommandBarrierWithWaitListKHR(
      command_buffer,
      command_queue,
      num_sync_points_in_wait_list,
      sync_point_wait_list,
      sync_point,
      mutable_handle,
    );
  }

  late final _clCommandBarrierWithWaitListKHRPtr = _lookup<
          ffi.NativeFunction<
              cl_int Function(
                  cl_command_buffer_khr,
                  cl_command_queue,
                  cl_uint,
                  ffi.Pointer<cl_sync_point_khr>,
                  ffi.Pointer<cl_sync_point_khr>,
                  ffi.Pointer<cl_mutable_command_khr>)>>(
      'clCommandBarrierWithWaitListKHR');
  late final _clCommandBarrierWithWaitListKHR =
      _clCommandBarrierWithWaitListKHRPtr.asFunction<
          int Function(
              cl_command_buffer_khr,
              cl_command_queue,
              int,
              ffi.Pointer<cl_sync_point_khr>,
              ffi.Pointer<cl_sync_point_khr>,
              ffi.Pointer<cl_mutable_command_khr>)>();

  int clCommandCopyBufferKHR(
    cl_command_buffer_khr command_buffer,
    cl_command_queue command_queue,
    cl_mem src_buffer,
    cl_mem dst_buffer,
    int src_offset,
    int dst_offset,
    int size,
    int num_sync_points_in_wait_list,
    ffi.Pointer<cl_sync_point_khr> sync_point_wait_list,
    ffi.Pointer<cl_sync_point_khr> sync_point,
    ffi.Pointer<cl_mutable_command_khr> mutable_handle,
  ) {
    return _clCommandCopyBufferKHR(
      command_buffer,
      command_queue,
      src_buffer,
      dst_buffer,
      src_offset,
      dst_offset,
      size,
      num_sync_points_in_wait_list,
      sync_point_wait_list,
      sync_point,
      mutable_handle,
    );
  }

  late final _clCommandCopyBufferKHRPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_buffer_khr,
              cl_command_queue,
              cl_mem,
              cl_mem,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_sync_point_khr>,
              ffi.Pointer<cl_sync_point_khr>,
              ffi.Pointer<cl_mutable_command_khr>)>>('clCommandCopyBufferKHR');
  late final _clCommandCopyBufferKHR = _clCommandCopyBufferKHRPtr.asFunction<
      int Function(
          cl_command_buffer_khr,
          cl_command_queue,
          cl_mem,
          cl_mem,
          int,
          int,
          int,
          int,
          ffi.Pointer<cl_sync_point_khr>,
          ffi.Pointer<cl_sync_point_khr>,
          ffi.Pointer<cl_mutable_command_khr>)>();

  int clCommandCopyBufferRectKHR(
    cl_command_buffer_khr command_buffer,
    cl_command_queue command_queue,
    cl_mem src_buffer,
    cl_mem dst_buffer,
    ffi.Pointer<ffi.Size> src_origin,
    ffi.Pointer<ffi.Size> dst_origin,
    ffi.Pointer<ffi.Size> region,
    int src_row_pitch,
    int src_slice_pitch,
    int dst_row_pitch,
    int dst_slice_pitch,
    int num_sync_points_in_wait_list,
    ffi.Pointer<cl_sync_point_khr> sync_point_wait_list,
    ffi.Pointer<cl_sync_point_khr> sync_point,
    ffi.Pointer<cl_mutable_command_khr> mutable_handle,
  ) {
    return _clCommandCopyBufferRectKHR(
      command_buffer,
      command_queue,
      src_buffer,
      dst_buffer,
      src_origin,
      dst_origin,
      region,
      src_row_pitch,
      src_slice_pitch,
      dst_row_pitch,
      dst_slice_pitch,
      num_sync_points_in_wait_list,
      sync_point_wait_list,
      sync_point,
      mutable_handle,
    );
  }

  late final _clCommandCopyBufferRectKHRPtr = _lookup<
          ffi.NativeFunction<
              cl_int Function(
                  cl_command_buffer_khr,
                  cl_command_queue,
                  cl_mem,
                  cl_mem,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Size,
                  ffi.Size,
                  ffi.Size,
                  ffi.Size,
                  cl_uint,
                  ffi.Pointer<cl_sync_point_khr>,
                  ffi.Pointer<cl_sync_point_khr>,
                  ffi.Pointer<cl_mutable_command_khr>)>>(
      'clCommandCopyBufferRectKHR');
  late final _clCommandCopyBufferRectKHR =
      _clCommandCopyBufferRectKHRPtr.asFunction<
          int Function(
              cl_command_buffer_khr,
              cl_command_queue,
              cl_mem,
              cl_mem,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              int,
              int,
              int,
              int,
              int,
              ffi.Pointer<cl_sync_point_khr>,
              ffi.Pointer<cl_sync_point_khr>,
              ffi.Pointer<cl_mutable_command_khr>)>();

  int clCommandCopyBufferToImageKHR(
    cl_command_buffer_khr command_buffer,
    cl_command_queue command_queue,
    cl_mem src_buffer,
    cl_mem dst_image,
    int src_offset,
    ffi.Pointer<ffi.Size> dst_origin,
    ffi.Pointer<ffi.Size> region,
    int num_sync_points_in_wait_list,
    ffi.Pointer<cl_sync_point_khr> sync_point_wait_list,
    ffi.Pointer<cl_sync_point_khr> sync_point,
    ffi.Pointer<cl_mutable_command_khr> mutable_handle,
  ) {
    return _clCommandCopyBufferToImageKHR(
      command_buffer,
      command_queue,
      src_buffer,
      dst_image,
      src_offset,
      dst_origin,
      region,
      num_sync_points_in_wait_list,
      sync_point_wait_list,
      sync_point,
      mutable_handle,
    );
  }

  late final _clCommandCopyBufferToImageKHRPtr = _lookup<
          ffi.NativeFunction<
              cl_int Function(
                  cl_command_buffer_khr,
                  cl_command_queue,
                  cl_mem,
                  cl_mem,
                  ffi.Size,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Size>,
                  cl_uint,
                  ffi.Pointer<cl_sync_point_khr>,
                  ffi.Pointer<cl_sync_point_khr>,
                  ffi.Pointer<cl_mutable_command_khr>)>>(
      'clCommandCopyBufferToImageKHR');
  late final _clCommandCopyBufferToImageKHR =
      _clCommandCopyBufferToImageKHRPtr.asFunction<
          int Function(
              cl_command_buffer_khr,
              cl_command_queue,
              cl_mem,
              cl_mem,
              int,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              int,
              ffi.Pointer<cl_sync_point_khr>,
              ffi.Pointer<cl_sync_point_khr>,
              ffi.Pointer<cl_mutable_command_khr>)>();

  int clCommandCopyImageKHR(
    cl_command_buffer_khr command_buffer,
    cl_command_queue command_queue,
    cl_mem src_image,
    cl_mem dst_image,
    ffi.Pointer<ffi.Size> src_origin,
    ffi.Pointer<ffi.Size> dst_origin,
    ffi.Pointer<ffi.Size> region,
    int num_sync_points_in_wait_list,
    ffi.Pointer<cl_sync_point_khr> sync_point_wait_list,
    ffi.Pointer<cl_sync_point_khr> sync_point,
    ffi.Pointer<cl_mutable_command_khr> mutable_handle,
  ) {
    return _clCommandCopyImageKHR(
      command_buffer,
      command_queue,
      src_image,
      dst_image,
      src_origin,
      dst_origin,
      region,
      num_sync_points_in_wait_list,
      sync_point_wait_list,
      sync_point,
      mutable_handle,
    );
  }

  late final _clCommandCopyImageKHRPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_buffer_khr,
              cl_command_queue,
              cl_mem,
              cl_mem,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              cl_uint,
              ffi.Pointer<cl_sync_point_khr>,
              ffi.Pointer<cl_sync_point_khr>,
              ffi.Pointer<cl_mutable_command_khr>)>>('clCommandCopyImageKHR');
  late final _clCommandCopyImageKHR = _clCommandCopyImageKHRPtr.asFunction<
      int Function(
          cl_command_buffer_khr,
          cl_command_queue,
          cl_mem,
          cl_mem,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<cl_sync_point_khr>,
          ffi.Pointer<cl_sync_point_khr>,
          ffi.Pointer<cl_mutable_command_khr>)>();

  int clCommandCopyImageToBufferKHR(
    cl_command_buffer_khr command_buffer,
    cl_command_queue command_queue,
    cl_mem src_image,
    cl_mem dst_buffer,
    ffi.Pointer<ffi.Size> src_origin,
    ffi.Pointer<ffi.Size> region,
    int dst_offset,
    int num_sync_points_in_wait_list,
    ffi.Pointer<cl_sync_point_khr> sync_point_wait_list,
    ffi.Pointer<cl_sync_point_khr> sync_point,
    ffi.Pointer<cl_mutable_command_khr> mutable_handle,
  ) {
    return _clCommandCopyImageToBufferKHR(
      command_buffer,
      command_queue,
      src_image,
      dst_buffer,
      src_origin,
      region,
      dst_offset,
      num_sync_points_in_wait_list,
      sync_point_wait_list,
      sync_point,
      mutable_handle,
    );
  }

  late final _clCommandCopyImageToBufferKHRPtr = _lookup<
          ffi.NativeFunction<
              cl_int Function(
                  cl_command_buffer_khr,
                  cl_command_queue,
                  cl_mem,
                  cl_mem,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Size,
                  cl_uint,
                  ffi.Pointer<cl_sync_point_khr>,
                  ffi.Pointer<cl_sync_point_khr>,
                  ffi.Pointer<cl_mutable_command_khr>)>>(
      'clCommandCopyImageToBufferKHR');
  late final _clCommandCopyImageToBufferKHR =
      _clCommandCopyImageToBufferKHRPtr.asFunction<
          int Function(
              cl_command_buffer_khr,
              cl_command_queue,
              cl_mem,
              cl_mem,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              int,
              int,
              ffi.Pointer<cl_sync_point_khr>,
              ffi.Pointer<cl_sync_point_khr>,
              ffi.Pointer<cl_mutable_command_khr>)>();

  int clCommandFillBufferKHR(
    cl_command_buffer_khr command_buffer,
    cl_command_queue command_queue,
    cl_mem buffer,
    ffi.Pointer<ffi.Void> pattern,
    int pattern_size,
    int offset,
    int size,
    int num_sync_points_in_wait_list,
    ffi.Pointer<cl_sync_point_khr> sync_point_wait_list,
    ffi.Pointer<cl_sync_point_khr> sync_point,
    ffi.Pointer<cl_mutable_command_khr> mutable_handle,
  ) {
    return _clCommandFillBufferKHR(
      command_buffer,
      command_queue,
      buffer,
      pattern,
      pattern_size,
      offset,
      size,
      num_sync_points_in_wait_list,
      sync_point_wait_list,
      sync_point,
      mutable_handle,
    );
  }

  late final _clCommandFillBufferKHRPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_buffer_khr,
              cl_command_queue,
              cl_mem,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_sync_point_khr>,
              ffi.Pointer<cl_sync_point_khr>,
              ffi.Pointer<cl_mutable_command_khr>)>>('clCommandFillBufferKHR');
  late final _clCommandFillBufferKHR = _clCommandFillBufferKHRPtr.asFunction<
      int Function(
          cl_command_buffer_khr,
          cl_command_queue,
          cl_mem,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          int,
          int,
          ffi.Pointer<cl_sync_point_khr>,
          ffi.Pointer<cl_sync_point_khr>,
          ffi.Pointer<cl_mutable_command_khr>)>();

  int clCommandFillImageKHR(
    cl_command_buffer_khr command_buffer,
    cl_command_queue command_queue,
    cl_mem image,
    ffi.Pointer<ffi.Void> fill_color,
    ffi.Pointer<ffi.Size> origin,
    ffi.Pointer<ffi.Size> region,
    int num_sync_points_in_wait_list,
    ffi.Pointer<cl_sync_point_khr> sync_point_wait_list,
    ffi.Pointer<cl_sync_point_khr> sync_point,
    ffi.Pointer<cl_mutable_command_khr> mutable_handle,
  ) {
    return _clCommandFillImageKHR(
      command_buffer,
      command_queue,
      image,
      fill_color,
      origin,
      region,
      num_sync_points_in_wait_list,
      sync_point_wait_list,
      sync_point,
      mutable_handle,
    );
  }

  late final _clCommandFillImageKHRPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_buffer_khr,
              cl_command_queue,
              cl_mem,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              cl_uint,
              ffi.Pointer<cl_sync_point_khr>,
              ffi.Pointer<cl_sync_point_khr>,
              ffi.Pointer<cl_mutable_command_khr>)>>('clCommandFillImageKHR');
  late final _clCommandFillImageKHR = _clCommandFillImageKHRPtr.asFunction<
      int Function(
          cl_command_buffer_khr,
          cl_command_queue,
          cl_mem,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>,
          int,
          ffi.Pointer<cl_sync_point_khr>,
          ffi.Pointer<cl_sync_point_khr>,
          ffi.Pointer<cl_mutable_command_khr>)>();

  int clCommandNDRangeKernelKHR(
    cl_command_buffer_khr command_buffer,
    cl_command_queue command_queue,
    ffi.Pointer<cl_ndrange_kernel_command_properties_khr> properties,
    cl_kernel kernel,
    int work_dim,
    ffi.Pointer<ffi.Size> global_work_offset,
    ffi.Pointer<ffi.Size> global_work_size,
    ffi.Pointer<ffi.Size> local_work_size,
    int num_sync_points_in_wait_list,
    ffi.Pointer<cl_sync_point_khr> sync_point_wait_list,
    ffi.Pointer<cl_sync_point_khr> sync_point,
    ffi.Pointer<cl_mutable_command_khr> mutable_handle,
  ) {
    return _clCommandNDRangeKernelKHR(
      command_buffer,
      command_queue,
      properties,
      kernel,
      work_dim,
      global_work_offset,
      global_work_size,
      local_work_size,
      num_sync_points_in_wait_list,
      sync_point_wait_list,
      sync_point,
      mutable_handle,
    );
  }

  late final _clCommandNDRangeKernelKHRPtr = _lookup<
          ffi.NativeFunction<
              cl_int Function(
                  cl_command_buffer_khr,
                  cl_command_queue,
                  ffi.Pointer<cl_ndrange_kernel_command_properties_khr>,
                  cl_kernel,
                  cl_uint,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Size>,
                  cl_uint,
                  ffi.Pointer<cl_sync_point_khr>,
                  ffi.Pointer<cl_sync_point_khr>,
                  ffi.Pointer<cl_mutable_command_khr>)>>(
      'clCommandNDRangeKernelKHR');
  late final _clCommandNDRangeKernelKHR =
      _clCommandNDRangeKernelKHRPtr.asFunction<
          int Function(
              cl_command_buffer_khr,
              cl_command_queue,
              ffi.Pointer<cl_ndrange_kernel_command_properties_khr>,
              cl_kernel,
              int,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              int,
              ffi.Pointer<cl_sync_point_khr>,
              ffi.Pointer<cl_sync_point_khr>,
              ffi.Pointer<cl_mutable_command_khr>)>();

  int clGetCommandBufferInfoKHR(
    cl_command_buffer_khr command_buffer,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetCommandBufferInfoKHR(
      command_buffer,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetCommandBufferInfoKHRPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_buffer_khr,
              cl_command_buffer_info_khr,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetCommandBufferInfoKHR');
  late final _clGetCommandBufferInfoKHR =
      _clGetCommandBufferInfoKHRPtr.asFunction<
          int Function(cl_command_buffer_khr, int, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>();

  int clSetMemObjectDestructorAPPLE(
    cl_mem memobj,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(cl_mem, ffi.Pointer<ffi.Void>)>>
        pfn_notify,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _clSetMemObjectDestructorAPPLE(
      memobj,
      pfn_notify,
      user_data,
    );
  }

  late final _clSetMemObjectDestructorAPPLEPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_mem,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(cl_mem, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('clSetMemObjectDestructorAPPLE');
  late final _clSetMemObjectDestructorAPPLE =
      _clSetMemObjectDestructorAPPLEPtr.asFunction<
          int Function(
              cl_mem,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(cl_mem, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>();

  void clLogMessagesToSystemLogAPPLE(
    ffi.Pointer<ffi.Char> errstr,
    ffi.Pointer<ffi.Void> private_info,
    int cb,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _clLogMessagesToSystemLogAPPLE(
      errstr,
      private_info,
      cb,
      user_data,
    );
  }

  late final _clLogMessagesToSystemLogAPPLEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Void>)>>('clLogMessagesToSystemLogAPPLE');
  late final _clLogMessagesToSystemLogAPPLE =
      _clLogMessagesToSystemLogAPPLEPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Void>)>();

  void clLogMessagesToStdoutAPPLE(
    ffi.Pointer<ffi.Char> errstr,
    ffi.Pointer<ffi.Void> private_info,
    int cb,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _clLogMessagesToStdoutAPPLE(
      errstr,
      private_info,
      cb,
      user_data,
    );
  }

  late final _clLogMessagesToStdoutAPPLEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
              ffi.Size, ffi.Pointer<ffi.Void>)>>('clLogMessagesToStdoutAPPLE');
  late final _clLogMessagesToStdoutAPPLE =
      _clLogMessagesToStdoutAPPLEPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Void>)>();

  void clLogMessagesToStderrAPPLE(
    ffi.Pointer<ffi.Char> errstr,
    ffi.Pointer<ffi.Void> private_info,
    int cb,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _clLogMessagesToStderrAPPLE(
      errstr,
      private_info,
      cb,
      user_data,
    );
  }

  late final _clLogMessagesToStderrAPPLEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
              ffi.Size, ffi.Pointer<ffi.Void>)>>('clLogMessagesToStderrAPPLE');
  late final _clLogMessagesToStderrAPPLE =
      _clLogMessagesToStderrAPPLEPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Void>)>();

  int clIcdGetPlatformIDsKHR(
    int num_entries,
    ffi.Pointer<cl_platform_id> platforms,
    ffi.Pointer<cl_uint> num_platforms,
  ) {
    return _clIcdGetPlatformIDsKHR(
      num_entries,
      platforms,
      num_platforms,
    );
  }

  late final _clIcdGetPlatformIDsKHRPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_uint, ffi.Pointer<cl_platform_id>,
              ffi.Pointer<cl_uint>)>>('clIcdGetPlatformIDsKHR');
  late final _clIcdGetPlatformIDsKHR = _clIcdGetPlatformIDsKHRPtr.asFunction<
      int Function(int, ffi.Pointer<cl_platform_id>, ffi.Pointer<cl_uint>)>();

  cl_program clCreateProgramWithILKHR(
    cl_context context,
    ffi.Pointer<ffi.Void> il,
    int length,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateProgramWithILKHR(
      context,
      il,
      length,
      errcode_ret,
    );
  }

  late final _clCreateProgramWithILKHRPtr = _lookup<
      ffi.NativeFunction<
          cl_program Function(cl_context, ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<cl_int>)>>('clCreateProgramWithILKHR');
  late final _clCreateProgramWithILKHR =
      _clCreateProgramWithILKHRPtr.asFunction<
          cl_program Function(
              cl_context, ffi.Pointer<ffi.Void>, int, ffi.Pointer<cl_int>)>();

  int clTerminateContextKHR(
    cl_context context,
  ) {
    return _clTerminateContextKHR(
      context,
    );
  }

  late final _clTerminateContextKHRPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_context)>>(
          'clTerminateContextKHR');
  late final _clTerminateContextKHR =
      _clTerminateContextKHRPtr.asFunction<int Function(cl_context)>();

  cl_command_queue clCreateCommandQueueWithPropertiesKHR(
    cl_context context,
    cl_device_id device,
    ffi.Pointer<cl_queue_properties_khr> properties,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateCommandQueueWithPropertiesKHR(
      context,
      device,
      properties,
      errcode_ret,
    );
  }

  late final _clCreateCommandQueueWithPropertiesKHRPtr = _lookup<
      ffi.NativeFunction<
          cl_command_queue Function(
              cl_context,
              cl_device_id,
              ffi.Pointer<cl_queue_properties_khr>,
              ffi.Pointer<cl_int>)>>('clCreateCommandQueueWithPropertiesKHR');
  late final _clCreateCommandQueueWithPropertiesKHR =
      _clCreateCommandQueueWithPropertiesKHRPtr.asFunction<
          cl_command_queue Function(cl_context, cl_device_id,
              ffi.Pointer<cl_queue_properties_khr>, ffi.Pointer<cl_int>)>();

  int clReleaseDeviceEXT(
    cl_device_id device,
  ) {
    return _clReleaseDeviceEXT(
      device,
    );
  }

  late final _clReleaseDeviceEXTPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_device_id)>>(
          'clReleaseDeviceEXT');
  late final _clReleaseDeviceEXT =
      _clReleaseDeviceEXTPtr.asFunction<int Function(cl_device_id)>();

  int clRetainDeviceEXT(
    cl_device_id device,
  ) {
    return _clRetainDeviceEXT(
      device,
    );
  }

  late final _clRetainDeviceEXTPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_device_id)>>(
          'clRetainDeviceEXT');
  late final _clRetainDeviceEXT =
      _clRetainDeviceEXTPtr.asFunction<int Function(cl_device_id)>();

  int clCreateSubDevicesEXT(
    cl_device_id in_device,
    ffi.Pointer<cl_device_partition_property_ext> properties,
    int num_entries,
    ffi.Pointer<cl_device_id> out_devices,
    ffi.Pointer<cl_uint> num_devices,
  ) {
    return _clCreateSubDevicesEXT(
      in_device,
      properties,
      num_entries,
      out_devices,
      num_devices,
    );
  }

  late final _clCreateSubDevicesEXTPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_device_id,
              ffi.Pointer<cl_device_partition_property_ext>,
              cl_uint,
              ffi.Pointer<cl_device_id>,
              ffi.Pointer<cl_uint>)>>('clCreateSubDevicesEXT');
  late final _clCreateSubDevicesEXT = _clCreateSubDevicesEXTPtr.asFunction<
      int Function(cl_device_id, ffi.Pointer<cl_device_partition_property_ext>,
          int, ffi.Pointer<cl_device_id>, ffi.Pointer<cl_uint>)>();

  int clEnqueueMigrateMemObjectEXT(
    cl_command_queue command_queue,
    int num_mem_objects,
    ffi.Pointer<cl_mem> mem_objects,
    int flags,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueMigrateMemObjectEXT(
      command_queue,
      num_mem_objects,
      mem_objects,
      flags,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueMigrateMemObjectEXTPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_uint,
              ffi.Pointer<cl_mem>,
              cl_mem_migration_flags_ext,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueMigrateMemObjectEXT');
  late final _clEnqueueMigrateMemObjectEXT =
      _clEnqueueMigrateMemObjectEXTPtr.asFunction<
          int Function(cl_command_queue, int, ffi.Pointer<cl_mem>, int, int,
              ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>();

  int clGetDeviceImageInfoQCOM(
    cl_device_id device,
    int image_width,
    int image_height,
    ffi.Pointer<cl_image_format> image_format,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetDeviceImageInfoQCOM(
      device,
      image_width,
      image_height,
      image_format,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetDeviceImageInfoQCOMPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_device_id,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<cl_image_format>,
              cl_image_pitch_info_qcom,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetDeviceImageInfoQCOM');
  late final _clGetDeviceImageInfoQCOM =
      _clGetDeviceImageInfoQCOMPtr.asFunction<
          int Function(cl_device_id, int, int, ffi.Pointer<cl_image_format>,
              int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int clEnqueueAcquireGrallocObjectsIMG(
    cl_command_queue command_queue,
    int num_objects,
    ffi.Pointer<cl_mem> mem_objects,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueAcquireGrallocObjectsIMG(
      command_queue,
      num_objects,
      mem_objects,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueAcquireGrallocObjectsIMGPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_uint,
              ffi.Pointer<cl_mem>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueAcquireGrallocObjectsIMG');
  late final _clEnqueueAcquireGrallocObjectsIMG =
      _clEnqueueAcquireGrallocObjectsIMGPtr.asFunction<
          int Function(cl_command_queue, int, ffi.Pointer<cl_mem>, int,
              ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>();

  int clEnqueueReleaseGrallocObjectsIMG(
    cl_command_queue command_queue,
    int num_objects,
    ffi.Pointer<cl_mem> mem_objects,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueReleaseGrallocObjectsIMG(
      command_queue,
      num_objects,
      mem_objects,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueReleaseGrallocObjectsIMGPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_uint,
              ffi.Pointer<cl_mem>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueReleaseGrallocObjectsIMG');
  late final _clEnqueueReleaseGrallocObjectsIMG =
      _clEnqueueReleaseGrallocObjectsIMGPtr.asFunction<
          int Function(cl_command_queue, int, ffi.Pointer<cl_mem>, int,
              ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>();

  int clEnqueueGenerateMipmapIMG(
    cl_command_queue command_queue,
    cl_mem src_image,
    cl_mem dst_image,
    int mipmap_filter_mode,
    ffi.Pointer<ffi.Size> array_region,
    ffi.Pointer<ffi.Size> mip_region,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueGenerateMipmapIMG(
      command_queue,
      src_image,
      dst_image,
      mipmap_filter_mode,
      array_region,
      mip_region,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueGenerateMipmapIMGPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_mem,
              cl_mem,
              cl_mipmap_filter_mode_img,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueGenerateMipmapIMG');
  late final _clEnqueueGenerateMipmapIMG =
      _clEnqueueGenerateMipmapIMGPtr.asFunction<
          int Function(
              cl_command_queue,
              cl_mem,
              cl_mem,
              int,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              int,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>();

  int clGetKernelSubGroupInfoKHR(
    cl_kernel in_kernel,
    cl_device_id in_device,
    int param_name,
    int input_value_size,
    ffi.Pointer<ffi.Void> input_value,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetKernelSubGroupInfoKHR(
      in_kernel,
      in_device,
      param_name,
      input_value_size,
      input_value,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetKernelSubGroupInfoKHRPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_kernel,
              cl_device_id,
              cl_kernel_sub_group_info,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetKernelSubGroupInfoKHR');
  late final _clGetKernelSubGroupInfoKHR =
      _clGetKernelSubGroupInfoKHRPtr.asFunction<
          int Function(cl_kernel, cl_device_id, int, int, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int clGetKernelSuggestedLocalWorkSizeKHR(
    cl_command_queue command_queue,
    cl_kernel kernel,
    int work_dim,
    ffi.Pointer<ffi.Size> global_work_offset,
    ffi.Pointer<ffi.Size> global_work_size,
    ffi.Pointer<ffi.Size> suggested_local_work_size,
  ) {
    return _clGetKernelSuggestedLocalWorkSizeKHR(
      command_queue,
      kernel,
      work_dim,
      global_work_offset,
      global_work_size,
      suggested_local_work_size,
    );
  }

  late final _clGetKernelSuggestedLocalWorkSizeKHRPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_kernel,
              cl_uint,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>)>>('clGetKernelSuggestedLocalWorkSizeKHR');
  late final _clGetKernelSuggestedLocalWorkSizeKHR =
      _clGetKernelSuggestedLocalWorkSizeKHRPtr.asFunction<
          int Function(cl_command_queue, cl_kernel, int, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Size>)>();

  int clEnqueueAcquireExternalMemObjectsKHR(
    cl_command_queue command_queue,
    int num_mem_objects,
    ffi.Pointer<cl_mem> mem_objects,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueAcquireExternalMemObjectsKHR(
      command_queue,
      num_mem_objects,
      mem_objects,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueAcquireExternalMemObjectsKHRPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_uint,
              ffi.Pointer<cl_mem>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueAcquireExternalMemObjectsKHR');
  late final _clEnqueueAcquireExternalMemObjectsKHR =
      _clEnqueueAcquireExternalMemObjectsKHRPtr.asFunction<
          int Function(cl_command_queue, int, ffi.Pointer<cl_mem>, int,
              ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>();

  int clEnqueueReleaseExternalMemObjectsKHR(
    cl_command_queue command_queue,
    int num_mem_objects,
    ffi.Pointer<cl_mem> mem_objects,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueReleaseExternalMemObjectsKHR(
      command_queue,
      num_mem_objects,
      mem_objects,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueReleaseExternalMemObjectsKHRPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_uint,
              ffi.Pointer<cl_mem>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueReleaseExternalMemObjectsKHR');
  late final _clEnqueueReleaseExternalMemObjectsKHR =
      _clEnqueueReleaseExternalMemObjectsKHRPtr.asFunction<
          int Function(cl_command_queue, int, ffi.Pointer<cl_mem>, int,
              ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>();

  int clGetSemaphoreHandleForTypeKHR(
    cl_semaphore_khr sema_object,
    cl_device_id device,
    int handle_type,
    int handle_size,
    ffi.Pointer<ffi.Void> handle_ptr,
    ffi.Pointer<ffi.Size> handle_size_ret,
  ) {
    return _clGetSemaphoreHandleForTypeKHR(
      sema_object,
      device,
      handle_type,
      handle_size,
      handle_ptr,
      handle_size_ret,
    );
  }

  late final _clGetSemaphoreHandleForTypeKHRPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_semaphore_khr,
              cl_device_id,
              cl_external_semaphore_handle_type_khr,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetSemaphoreHandleForTypeKHR');
  late final _clGetSemaphoreHandleForTypeKHR =
      _clGetSemaphoreHandleForTypeKHRPtr.asFunction<
          int Function(cl_semaphore_khr, cl_device_id, int, int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  cl_semaphore_khr clCreateSemaphoreWithPropertiesKHR(
    cl_context context,
    ffi.Pointer<cl_semaphore_properties_khr> sema_props,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateSemaphoreWithPropertiesKHR(
      context,
      sema_props,
      errcode_ret,
    );
  }

  late final _clCreateSemaphoreWithPropertiesKHRPtr = _lookup<
      ffi.NativeFunction<
          cl_semaphore_khr Function(
              cl_context,
              ffi.Pointer<cl_semaphore_properties_khr>,
              ffi.Pointer<cl_int>)>>('clCreateSemaphoreWithPropertiesKHR');
  late final _clCreateSemaphoreWithPropertiesKHR =
      _clCreateSemaphoreWithPropertiesKHRPtr.asFunction<
          cl_semaphore_khr Function(cl_context,
              ffi.Pointer<cl_semaphore_properties_khr>, ffi.Pointer<cl_int>)>();

  int clEnqueueWaitSemaphoresKHR(
    cl_command_queue command_queue,
    int num_sema_objects,
    ffi.Pointer<cl_semaphore_khr> sema_objects,
    ffi.Pointer<cl_semaphore_payload_khr> sema_payload_list,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueWaitSemaphoresKHR(
      command_queue,
      num_sema_objects,
      sema_objects,
      sema_payload_list,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueWaitSemaphoresKHRPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_uint,
              ffi.Pointer<cl_semaphore_khr>,
              ffi.Pointer<cl_semaphore_payload_khr>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueWaitSemaphoresKHR');
  late final _clEnqueueWaitSemaphoresKHR =
      _clEnqueueWaitSemaphoresKHRPtr.asFunction<
          int Function(
              cl_command_queue,
              int,
              ffi.Pointer<cl_semaphore_khr>,
              ffi.Pointer<cl_semaphore_payload_khr>,
              int,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>();

  int clEnqueueSignalSemaphoresKHR(
    cl_command_queue command_queue,
    int num_sema_objects,
    ffi.Pointer<cl_semaphore_khr> sema_objects,
    ffi.Pointer<cl_semaphore_payload_khr> sema_payload_list,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueSignalSemaphoresKHR(
      command_queue,
      num_sema_objects,
      sema_objects,
      sema_payload_list,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueSignalSemaphoresKHRPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_uint,
              ffi.Pointer<cl_semaphore_khr>,
              ffi.Pointer<cl_semaphore_payload_khr>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueSignalSemaphoresKHR');
  late final _clEnqueueSignalSemaphoresKHR =
      _clEnqueueSignalSemaphoresKHRPtr.asFunction<
          int Function(
              cl_command_queue,
              int,
              ffi.Pointer<cl_semaphore_khr>,
              ffi.Pointer<cl_semaphore_payload_khr>,
              int,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>();

  int clGetSemaphoreInfoKHR(
    cl_semaphore_khr sema_object,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetSemaphoreInfoKHR(
      sema_object,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetSemaphoreInfoKHRPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_semaphore_khr,
              cl_semaphore_info_khr,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetSemaphoreInfoKHR');
  late final _clGetSemaphoreInfoKHR = _clGetSemaphoreInfoKHRPtr.asFunction<
      int Function(cl_semaphore_khr, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Size>)>();

  int clReleaseSemaphoreKHR(
    cl_semaphore_khr sema_object,
  ) {
    return _clReleaseSemaphoreKHR(
      sema_object,
    );
  }

  late final _clReleaseSemaphoreKHRPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_semaphore_khr)>>(
          'clReleaseSemaphoreKHR');
  late final _clReleaseSemaphoreKHR =
      _clReleaseSemaphoreKHRPtr.asFunction<int Function(cl_semaphore_khr)>();

  int clRetainSemaphoreKHR(
    cl_semaphore_khr sema_object,
  ) {
    return _clRetainSemaphoreKHR(
      sema_object,
    );
  }

  late final _clRetainSemaphoreKHRPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_semaphore_khr)>>(
          'clRetainSemaphoreKHR');
  late final _clRetainSemaphoreKHR =
      _clRetainSemaphoreKHRPtr.asFunction<int Function(cl_semaphore_khr)>();

  cl_mem clImportMemoryARM(
    cl_context context,
    int flags,
    ffi.Pointer<cl_import_properties_arm> properties,
    ffi.Pointer<ffi.Void> memory,
    int size,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clImportMemoryARM(
      context,
      flags,
      properties,
      memory,
      size,
      errcode_ret,
    );
  }

  late final _clImportMemoryARMPtr = _lookup<
      ffi.NativeFunction<
          cl_mem Function(
              cl_context,
              cl_mem_flags,
              ffi.Pointer<cl_import_properties_arm>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<cl_int>)>>('clImportMemoryARM');
  late final _clImportMemoryARM = _clImportMemoryARMPtr.asFunction<
      cl_mem Function(cl_context, int, ffi.Pointer<cl_import_properties_arm>,
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<cl_int>)>();

  ffi.Pointer<ffi.Void> clSVMAllocARM(
    cl_context context,
    int flags,
    int size,
    int alignment,
  ) {
    return _clSVMAllocARM(
      context,
      flags,
      size,
      alignment,
    );
  }

  late final _clSVMAllocARMPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(cl_context, cl_svm_mem_flags_arm,
              ffi.Size, cl_uint)>>('clSVMAllocARM');
  late final _clSVMAllocARM = _clSVMAllocARMPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(cl_context, int, int, int)>();

  void clSVMFreeARM(
    cl_context context,
    ffi.Pointer<ffi.Void> svm_pointer,
  ) {
    return _clSVMFreeARM(
      context,
      svm_pointer,
    );
  }

  late final _clSVMFreeARMPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              cl_context, ffi.Pointer<ffi.Void>)>>('clSVMFreeARM');
  late final _clSVMFreeARM = _clSVMFreeARMPtr
      .asFunction<void Function(cl_context, ffi.Pointer<ffi.Void>)>();

  int clEnqueueSVMFreeARM(
    cl_command_queue command_queue,
    int num_svm_pointers,
    ffi.Pointer<ffi.Pointer<ffi.Void>> svm_pointers,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(cl_command_queue, cl_uint,
                    ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Void>)>>
        pfn_free_func,
    ffi.Pointer<ffi.Void> user_data,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueSVMFreeARM(
      command_queue,
      num_svm_pointers,
      svm_pointers,
      pfn_free_func,
      user_data,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueSVMFreeARMPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_uint,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          cl_command_queue,
                          cl_uint,
                          ffi.Pointer<ffi.Pointer<ffi.Void>>,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueSVMFreeARM');
  late final _clEnqueueSVMFreeARM = _clEnqueueSVMFreeARMPtr.asFunction<
      int Function(
          cl_command_queue,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      cl_command_queue,
                      cl_uint,
                      ffi.Pointer<ffi.Pointer<ffi.Void>>,
                      ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueSVMMemcpyARM(
    cl_command_queue command_queue,
    int blocking_copy,
    ffi.Pointer<ffi.Void> dst_ptr,
    ffi.Pointer<ffi.Void> src_ptr,
    int size,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueSVMMemcpyARM(
      command_queue,
      blocking_copy,
      dst_ptr,
      src_ptr,
      size,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueSVMMemcpyARMPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_bool,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueSVMMemcpyARM');
  late final _clEnqueueSVMMemcpyARM = _clEnqueueSVMMemcpyARMPtr.asFunction<
      int Function(
          cl_command_queue,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueSVMMemFillARM(
    cl_command_queue command_queue,
    ffi.Pointer<ffi.Void> svm_ptr,
    ffi.Pointer<ffi.Void> pattern,
    int pattern_size,
    int size,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueSVMMemFillARM(
      command_queue,
      svm_ptr,
      pattern,
      pattern_size,
      size,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueSVMMemFillARMPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueSVMMemFillARM');
  late final _clEnqueueSVMMemFillARM = _clEnqueueSVMMemFillARMPtr.asFunction<
      int Function(
          cl_command_queue,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueSVMMapARM(
    cl_command_queue command_queue,
    int blocking_map,
    int flags,
    ffi.Pointer<ffi.Void> svm_ptr,
    int size,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueSVMMapARM(
      command_queue,
      blocking_map,
      flags,
      svm_ptr,
      size,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueSVMMapARMPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_bool,
              cl_map_flags,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueSVMMapARM');
  late final _clEnqueueSVMMapARM = _clEnqueueSVMMapARMPtr.asFunction<
      int Function(cl_command_queue, int, int, ffi.Pointer<ffi.Void>, int, int,
          ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>();

  int clEnqueueSVMUnmapARM(
    cl_command_queue command_queue,
    ffi.Pointer<ffi.Void> svm_ptr,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueSVMUnmapARM(
      command_queue,
      svm_ptr,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueSVMUnmapARMPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              ffi.Pointer<ffi.Void>,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueSVMUnmapARM');
  late final _clEnqueueSVMUnmapARM = _clEnqueueSVMUnmapARMPtr.asFunction<
      int Function(cl_command_queue, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>();

  int clSetKernelArgSVMPointerARM(
    cl_kernel kernel,
    int arg_index,
    ffi.Pointer<ffi.Void> arg_value,
  ) {
    return _clSetKernelArgSVMPointerARM(
      kernel,
      arg_index,
      arg_value,
    );
  }

  late final _clSetKernelArgSVMPointerARMPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_kernel, cl_uint,
              ffi.Pointer<ffi.Void>)>>('clSetKernelArgSVMPointerARM');
  late final _clSetKernelArgSVMPointerARM = _clSetKernelArgSVMPointerARMPtr
      .asFunction<int Function(cl_kernel, int, ffi.Pointer<ffi.Void>)>();

  int clSetKernelExecInfoARM(
    cl_kernel kernel,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
  ) {
    return _clSetKernelExecInfoARM(
      kernel,
      param_name,
      param_value_size,
      param_value,
    );
  }

  late final _clSetKernelExecInfoARMPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_kernel, cl_kernel_exec_info_arm, ffi.Size,
              ffi.Pointer<ffi.Void>)>>('clSetKernelExecInfoARM');
  late final _clSetKernelExecInfoARM = _clSetKernelExecInfoARMPtr
      .asFunction<int Function(cl_kernel, int, int, ffi.Pointer<ffi.Void>)>();

  cl_accelerator_intel clCreateAcceleratorINTEL(
    cl_context context,
    int accelerator_type,
    int descriptor_size,
    ffi.Pointer<ffi.Void> descriptor,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateAcceleratorINTEL(
      context,
      accelerator_type,
      descriptor_size,
      descriptor,
      errcode_ret,
    );
  }

  late final _clCreateAcceleratorINTELPtr = _lookup<
      ffi.NativeFunction<
          cl_accelerator_intel Function(
              cl_context,
              cl_accelerator_type_intel,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<cl_int>)>>('clCreateAcceleratorINTEL');
  late final _clCreateAcceleratorINTEL =
      _clCreateAcceleratorINTELPtr.asFunction<
          cl_accelerator_intel Function(cl_context, int, int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<cl_int>)>();

  int clGetAcceleratorInfoINTEL(
    cl_accelerator_intel accelerator,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetAcceleratorInfoINTEL(
      accelerator,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetAcceleratorInfoINTELPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_accelerator_intel,
              cl_accelerator_info_intel,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetAcceleratorInfoINTEL');
  late final _clGetAcceleratorInfoINTEL =
      _clGetAcceleratorInfoINTELPtr.asFunction<
          int Function(cl_accelerator_intel, int, int, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>();

  int clRetainAcceleratorINTEL(
    cl_accelerator_intel accelerator,
  ) {
    return _clRetainAcceleratorINTEL(
      accelerator,
    );
  }

  late final _clRetainAcceleratorINTELPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_accelerator_intel)>>(
          'clRetainAcceleratorINTEL');
  late final _clRetainAcceleratorINTEL = _clRetainAcceleratorINTELPtr
      .asFunction<int Function(cl_accelerator_intel)>();

  int clReleaseAcceleratorINTEL(
    cl_accelerator_intel accelerator,
  ) {
    return _clReleaseAcceleratorINTEL(
      accelerator,
    );
  }

  late final _clReleaseAcceleratorINTELPtr =
      _lookup<ffi.NativeFunction<cl_int Function(cl_accelerator_intel)>>(
          'clReleaseAcceleratorINTEL');
  late final _clReleaseAcceleratorINTEL = _clReleaseAcceleratorINTELPtr
      .asFunction<int Function(cl_accelerator_intel)>();

  ffi.Pointer<ffi.Void> clHostMemAllocINTEL(
    cl_context context,
    ffi.Pointer<cl_mem_properties_intel> properties,
    int size,
    int alignment,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clHostMemAllocINTEL(
      context,
      properties,
      size,
      alignment,
      errcode_ret,
    );
  }

  late final _clHostMemAllocINTELPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              cl_context,
              ffi.Pointer<cl_mem_properties_intel>,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_int>)>>('clHostMemAllocINTEL');
  late final _clHostMemAllocINTEL = _clHostMemAllocINTELPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          cl_context,
          ffi.Pointer<cl_mem_properties_intel>,
          int,
          int,
          ffi.Pointer<cl_int>)>();

  ffi.Pointer<ffi.Void> clDeviceMemAllocINTEL(
    cl_context context,
    cl_device_id device,
    ffi.Pointer<cl_mem_properties_intel> properties,
    int size,
    int alignment,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clDeviceMemAllocINTEL(
      context,
      device,
      properties,
      size,
      alignment,
      errcode_ret,
    );
  }

  late final _clDeviceMemAllocINTELPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              cl_context,
              cl_device_id,
              ffi.Pointer<cl_mem_properties_intel>,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_int>)>>('clDeviceMemAllocINTEL');
  late final _clDeviceMemAllocINTEL = _clDeviceMemAllocINTELPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          cl_context,
          cl_device_id,
          ffi.Pointer<cl_mem_properties_intel>,
          int,
          int,
          ffi.Pointer<cl_int>)>();

  ffi.Pointer<ffi.Void> clSharedMemAllocINTEL(
    cl_context context,
    cl_device_id device,
    ffi.Pointer<cl_mem_properties_intel> properties,
    int size,
    int alignment,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clSharedMemAllocINTEL(
      context,
      device,
      properties,
      size,
      alignment,
      errcode_ret,
    );
  }

  late final _clSharedMemAllocINTELPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              cl_context,
              cl_device_id,
              ffi.Pointer<cl_mem_properties_intel>,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_int>)>>('clSharedMemAllocINTEL');
  late final _clSharedMemAllocINTEL = _clSharedMemAllocINTELPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          cl_context,
          cl_device_id,
          ffi.Pointer<cl_mem_properties_intel>,
          int,
          int,
          ffi.Pointer<cl_int>)>();

  int clMemFreeINTEL(
    cl_context context,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _clMemFreeINTEL(
      context,
      ptr,
    );
  }

  late final _clMemFreeINTELPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_context, ffi.Pointer<ffi.Void>)>>('clMemFreeINTEL');
  late final _clMemFreeINTEL = _clMemFreeINTELPtr
      .asFunction<int Function(cl_context, ffi.Pointer<ffi.Void>)>();

  int clMemBlockingFreeINTEL(
    cl_context context,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _clMemBlockingFreeINTEL(
      context,
      ptr,
    );
  }

  late final _clMemBlockingFreeINTELPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_context, ffi.Pointer<ffi.Void>)>>('clMemBlockingFreeINTEL');
  late final _clMemBlockingFreeINTEL = _clMemBlockingFreeINTELPtr
      .asFunction<int Function(cl_context, ffi.Pointer<ffi.Void>)>();

  int clGetMemAllocInfoINTEL(
    cl_context context,
    ffi.Pointer<ffi.Void> ptr,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetMemAllocInfoINTEL(
      context,
      ptr,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetMemAllocInfoINTELPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_context,
              ffi.Pointer<ffi.Void>,
              cl_mem_info_intel,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetMemAllocInfoINTEL');
  late final _clGetMemAllocInfoINTEL = _clGetMemAllocInfoINTELPtr.asFunction<
      int Function(cl_context, ffi.Pointer<ffi.Void>, int, int,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int clSetKernelArgMemPointerINTEL(
    cl_kernel kernel,
    int arg_index,
    ffi.Pointer<ffi.Void> arg_value,
  ) {
    return _clSetKernelArgMemPointerINTEL(
      kernel,
      arg_index,
      arg_value,
    );
  }

  late final _clSetKernelArgMemPointerINTELPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(cl_kernel, cl_uint,
              ffi.Pointer<ffi.Void>)>>('clSetKernelArgMemPointerINTEL');
  late final _clSetKernelArgMemPointerINTEL = _clSetKernelArgMemPointerINTELPtr
      .asFunction<int Function(cl_kernel, int, ffi.Pointer<ffi.Void>)>();

  int clEnqueueMemFillINTEL(
    cl_command_queue command_queue,
    ffi.Pointer<ffi.Void> dst_ptr,
    ffi.Pointer<ffi.Void> pattern,
    int pattern_size,
    int size,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueMemFillINTEL(
      command_queue,
      dst_ptr,
      pattern,
      pattern_size,
      size,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueMemFillINTELPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueMemFillINTEL');
  late final _clEnqueueMemFillINTEL = _clEnqueueMemFillINTELPtr.asFunction<
      int Function(
          cl_command_queue,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueMemcpyINTEL(
    cl_command_queue command_queue,
    int blocking,
    ffi.Pointer<ffi.Void> dst_ptr,
    ffi.Pointer<ffi.Void> src_ptr,
    int size,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueMemcpyINTEL(
      command_queue,
      blocking,
      dst_ptr,
      src_ptr,
      size,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueMemcpyINTELPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              cl_bool,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueMemcpyINTEL');
  late final _clEnqueueMemcpyINTEL = _clEnqueueMemcpyINTELPtr.asFunction<
      int Function(
          cl_command_queue,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<cl_event>,
          ffi.Pointer<cl_event>)>();

  int clEnqueueMemAdviseINTEL(
    cl_command_queue command_queue,
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int advice,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueMemAdviseINTEL(
      command_queue,
      ptr,
      size,
      advice,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueMemAdviseINTELPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              cl_mem_advice_intel,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueMemAdviseINTEL');
  late final _clEnqueueMemAdviseINTEL = _clEnqueueMemAdviseINTELPtr.asFunction<
      int Function(cl_command_queue, ffi.Pointer<ffi.Void>, int, int, int,
          ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>();

  int clEnqueueMigrateMemINTEL(
    cl_command_queue command_queue,
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int flags,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueMigrateMemINTEL(
      command_queue,
      ptr,
      size,
      flags,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueMigrateMemINTELPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              cl_mem_migration_flags,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueMigrateMemINTEL');
  late final _clEnqueueMigrateMemINTEL =
      _clEnqueueMigrateMemINTELPtr.asFunction<
          int Function(cl_command_queue, ffi.Pointer<ffi.Void>, int, int, int,
              ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>();

  int clEnqueueMemsetINTEL(
    cl_command_queue command_queue,
    ffi.Pointer<ffi.Void> dst_ptr,
    int value,
    int size,
    int num_events_in_wait_list,
    ffi.Pointer<cl_event> event_wait_list,
    ffi.Pointer<cl_event> event,
  ) {
    return _clEnqueueMemsetINTEL(
      command_queue,
      dst_ptr,
      value,
      size,
      num_events_in_wait_list,
      event_wait_list,
      event,
    );
  }

  late final _clEnqueueMemsetINTELPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_command_queue,
              ffi.Pointer<ffi.Void>,
              cl_int,
              ffi.Size,
              cl_uint,
              ffi.Pointer<cl_event>,
              ffi.Pointer<cl_event>)>>('clEnqueueMemsetINTEL');
  late final _clEnqueueMemsetINTEL = _clEnqueueMemsetINTELPtr.asFunction<
      int Function(cl_command_queue, ffi.Pointer<ffi.Void>, int, int, int,
          ffi.Pointer<cl_event>, ffi.Pointer<cl_event>)>();

  cl_mem clCreateBufferWithPropertiesINTEL(
    cl_context context,
    ffi.Pointer<cl_mem_properties_intel> properties,
    int flags,
    int size,
    ffi.Pointer<ffi.Void> host_ptr,
    ffi.Pointer<cl_int> errcode_ret,
  ) {
    return _clCreateBufferWithPropertiesINTEL(
      context,
      properties,
      flags,
      size,
      host_ptr,
      errcode_ret,
    );
  }

  late final _clCreateBufferWithPropertiesINTELPtr = _lookup<
      ffi.NativeFunction<
          cl_mem Function(
              cl_context,
              ffi.Pointer<cl_mem_properties_intel>,
              cl_mem_flags,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<cl_int>)>>('clCreateBufferWithPropertiesINTEL');
  late final _clCreateBufferWithPropertiesINTEL =
      _clCreateBufferWithPropertiesINTELPtr.asFunction<
          cl_mem Function(cl_context, ffi.Pointer<cl_mem_properties_intel>, int,
              int, ffi.Pointer<ffi.Void>, ffi.Pointer<cl_int>)>();

  int clGetImageRequirementsInfoEXT(
    cl_context context,
    ffi.Pointer<cl_mem_properties> properties,
    int flags,
    ffi.Pointer<cl_image_format> image_format,
    ffi.Pointer<cl_image_desc> image_desc,
    int param_name,
    int param_value_size,
    ffi.Pointer<ffi.Void> param_value,
    ffi.Pointer<ffi.Size> param_value_size_ret,
  ) {
    return _clGetImageRequirementsInfoEXT(
      context,
      properties,
      flags,
      image_format,
      image_desc,
      param_name,
      param_value_size,
      param_value,
      param_value_size_ret,
    );
  }

  late final _clGetImageRequirementsInfoEXTPtr = _lookup<
      ffi.NativeFunction<
          cl_int Function(
              cl_context,
              ffi.Pointer<cl_mem_properties>,
              cl_mem_flags,
              ffi.Pointer<cl_image_format>,
              ffi.Pointer<cl_image_desc>,
              cl_image_requirements_info_ext,
              ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('clGetImageRequirementsInfoEXT');
  late final _clGetImageRequirementsInfoEXT =
      _clGetImageRequirementsInfoEXTPtr.asFunction<
          int Function(
              cl_context,
              ffi.Pointer<cl_mem_properties>,
              int,
              ffi.Pointer<cl_image_format>,
              ffi.Pointer<cl_image_desc>,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>();
}

class cl_char2 extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<cl_char> s;
}

typedef cl_char = ffi.Int8;

class cl_char4 extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<cl_char> s;
}

class cl_char8 extends ffi.Opaque {}

class cl_char16 extends ffi.Opaque {}

class cl_uchar2 extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<cl_uchar> s;
}

typedef cl_uchar = ffi.Uint8;

class cl_uchar4 extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<cl_uchar> s;
}

class cl_uchar8 extends ffi.Opaque {}

class cl_uchar16 extends ffi.Opaque {}

class cl_short2 extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<cl_short> s;
}

typedef cl_short = ffi.Int16;

class cl_short4 extends ffi.Opaque {}

class cl_short8 extends ffi.Opaque {}

class cl_short16 extends ffi.Opaque {}

class cl_ushort2 extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<cl_ushort> s;
}

typedef cl_ushort = ffi.Uint16;

class cl_ushort4 extends ffi.Opaque {}

class cl_ushort8 extends ffi.Opaque {}

class cl_ushort16 extends ffi.Opaque {}

class cl_half2 extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<cl_half> s;
}

typedef cl_half = ffi.Uint16;

class cl_half4 extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<cl_half> s;
}

class cl_half8 extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<cl_half> s;
}

class cl_half16 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<cl_half> s;
}

class cl_int2 extends ffi.Opaque {}

class cl_int4 extends ffi.Opaque {}

class cl_int8 extends ffi.Opaque {}

class cl_int16 extends ffi.Opaque {}

class cl_uint2 extends ffi.Opaque {}

class cl_uint4 extends ffi.Opaque {}

class cl_uint8 extends ffi.Opaque {}

class cl_uint16 extends ffi.Opaque {}

class cl_long2 extends ffi.Opaque {}

class cl_long4 extends ffi.Opaque {}

class cl_long8 extends ffi.Opaque {}

class cl_long16 extends ffi.Opaque {}

class cl_ulong2 extends ffi.Opaque {}

class cl_ulong4 extends ffi.Opaque {}

class cl_ulong8 extends ffi.Opaque {}

class cl_ulong16 extends ffi.Opaque {}

class cl_float2 extends ffi.Opaque {}

class cl_float4 extends ffi.Opaque {}

class cl_float8 extends ffi.Opaque {}

class cl_float16 extends ffi.Opaque {}

class cl_double2 extends ffi.Opaque {}

class cl_double4 extends ffi.Opaque {}

class cl_double8 extends ffi.Opaque {}

class cl_double16 extends ffi.Opaque {}

class _cl_platform_id extends ffi.Opaque {}

class _cl_device_id extends ffi.Opaque {}

class _cl_context extends ffi.Opaque {}

class _cl_command_queue extends ffi.Opaque {}

class _cl_mem extends ffi.Opaque {}

class _cl_program extends ffi.Opaque {}

class _cl_kernel extends ffi.Opaque {}

class _cl_event extends ffi.Opaque {}

class _cl_sampler extends ffi.Opaque {}

class _cl_image_format extends ffi.Struct {
  @cl_channel_order()
  external int image_channel_order;

  @cl_channel_type()
  external int image_channel_data_type;
}

typedef cl_channel_order = cl_uint;
typedef cl_uint = ffi.Uint32;
typedef cl_channel_type = cl_uint;

class _cl_image_desc extends ffi.Struct {
  @cl_mem_object_type()
  external int image_type;

  @ffi.Size()
  external int image_width;

  @ffi.Size()
  external int image_height;

  @ffi.Size()
  external int image_depth;

  @ffi.Size()
  external int image_array_size;

  @ffi.Size()
  external int image_row_pitch;

  @ffi.Size()
  external int image_slice_pitch;

  @cl_uint()
  external int num_mip_levels;

  @cl_uint()
  external int num_samples;
}

typedef cl_mem_object_type = cl_uint;

class _cl_buffer_region extends ffi.Struct {
  @ffi.Size()
  external int origin;

  @ffi.Size()
  external int size;
}

class _cl_name_version extends ffi.Struct {
  @cl_version()
  external int version;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> name;
}

typedef cl_version = cl_uint;
typedef cl_int = ffi.Int32;

/// /
typedef cl_platform_id = ffi.Pointer<_cl_platform_id>;
typedef cl_platform_info = cl_uint;
typedef cl_device_type = cl_bitfield;
typedef cl_bitfield = cl_ulong;
typedef cl_ulong = ffi.Uint64;
typedef cl_device_id = ffi.Pointer<_cl_device_id>;
typedef cl_device_info = cl_uint;
typedef cl_device_partition_property = ffi.IntPtr;
typedef cl_context = ffi.Pointer<_cl_context>;
typedef cl_command_queue = ffi.Pointer<_cl_command_queue>;
typedef cl_context_properties = ffi.IntPtr;
typedef cl_context_info = cl_uint;
typedef cl_queue_properties = cl_properties;
typedef cl_properties = cl_ulong;
typedef cl_command_queue_info = cl_uint;
typedef cl_mem = ffi.Pointer<_cl_mem>;
typedef cl_mem_flags = cl_bitfield;
typedef cl_buffer_create_type = cl_uint;
typedef cl_image_format = _cl_image_format;
typedef cl_image_desc = _cl_image_desc;
typedef cl_pipe_properties = ffi.IntPtr;
typedef cl_mem_properties = cl_properties;
typedef cl_mem_info = cl_uint;
typedef cl_image_info = cl_uint;
typedef cl_pipe_info = cl_uint;
typedef cl_svm_mem_flags = cl_bitfield;
typedef cl_sampler = ffi.Pointer<_cl_sampler>;
typedef cl_sampler_properties = cl_properties;
typedef cl_sampler_info = cl_uint;
typedef cl_program = ffi.Pointer<_cl_program>;
typedef cl_program_info = cl_uint;
typedef cl_program_build_info = cl_uint;
typedef cl_kernel = ffi.Pointer<_cl_kernel>;
typedef cl_kernel_exec_info = cl_uint;
typedef cl_kernel_info = cl_uint;
typedef cl_kernel_arg_info = cl_uint;
typedef cl_kernel_work_group_info = cl_uint;
typedef cl_kernel_sub_group_info = cl_uint;
typedef cl_event = ffi.Pointer<_cl_event>;
typedef cl_event_info = cl_uint;
typedef cl_profiling_info = cl_uint;
typedef cl_bool = cl_uint;
typedef cl_map_flags = cl_bitfield;
typedef cl_mem_migration_flags = cl_bitfield;
typedef cl_command_queue_properties = cl_bitfield;
typedef cl_addressing_mode = cl_uint;
typedef cl_filter_mode = cl_uint;

class __GLsync extends ffi.Opaque {}

typedef cl_GLuint = ffi.UnsignedInt;
typedef cl_GLenum = ffi.UnsignedInt;
typedef cl_GLint = ffi.Int;
typedef cl_gl_object_type = cl_uint;
typedef cl_gl_texture_info = cl_uint;
typedef cl_gl_context_info = cl_uint;
typedef cl_GLsync = ffi.Pointer<__GLsync>;

class _cl_command_buffer_khr extends ffi.Opaque {}

class _cl_mutable_command_khr extends ffi.Opaque {}

typedef cl_command_buffer_khr = ffi.Pointer<_cl_command_buffer_khr>;
typedef cl_command_buffer_properties_khr = cl_properties;
typedef cl_sync_point_khr = cl_uint;
typedef cl_mutable_command_khr = ffi.Pointer<_cl_mutable_command_khr>;
typedef cl_ndrange_kernel_command_properties_khr = cl_properties;
typedef cl_command_buffer_info_khr = cl_uint;
typedef cl_queue_properties_khr = cl_properties;
typedef cl_device_partition_property_ext = cl_ulong;
typedef cl_mem_migration_flags_ext = cl_bitfield;
typedef cl_image_pitch_info_qcom = cl_uint;

class _cl_mem_ext_host_ptr extends ffi.Struct {
  @cl_uint()
  external int allocation_type;

  @cl_uint()
  external int host_cache_policy;
}

class _cl_mem_ion_host_ptr extends ffi.Struct {
  external cl_mem_ext_host_ptr ext_host_ptr;

  @ffi.Int()
  external int ion_filedesc;

  external ffi.Pointer<ffi.Void> ion_hostptr;
}

typedef cl_mem_ext_host_ptr = _cl_mem_ext_host_ptr;

class _cl_mem_android_native_buffer_host_ptr extends ffi.Struct {
  external cl_mem_ext_host_ptr ext_host_ptr;

  external ffi.Pointer<ffi.Void> anb_ptr;
}

typedef cl_mipmap_filter_mode_img = cl_uint;

class _cl_name_version_khr extends ffi.Struct {
  @cl_version_khr()
  external int version;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> name;
}

typedef cl_version_khr = cl_uint;

class _cl_device_pci_bus_info_khr extends ffi.Struct {
  @cl_uint()
  external int pci_domain;

  @cl_uint()
  external int pci_bus;

  @cl_uint()
  external int pci_device;

  @cl_uint()
  external int pci_function;
}

class _cl_device_integer_dot_product_acceleration_properties_khr
    extends ffi.Struct {
  @cl_bool()
  external int signed_accelerated;

  @cl_bool()
  external int unsigned_accelerated;

  @cl_bool()
  external int mixed_signedness_accelerated;

  @cl_bool()
  external int accumulating_saturating_signed_accelerated;

  @cl_bool()
  external int accumulating_saturating_unsigned_accelerated;

  @cl_bool()
  external int accumulating_saturating_mixed_signedness_accelerated;
}

class _cl_semaphore_khr extends ffi.Opaque {}

typedef cl_semaphore_khr = ffi.Pointer<_cl_semaphore_khr>;
typedef cl_external_semaphore_handle_type_khr = cl_uint;
typedef cl_semaphore_properties_khr = cl_properties;
typedef cl_semaphore_payload_khr = cl_ulong;
typedef cl_semaphore_info_khr = cl_uint;
typedef cl_import_properties_arm = ffi.IntPtr;
typedef cl_svm_mem_flags_arm = cl_bitfield;
typedef cl_kernel_exec_info_arm = cl_uint;

class _cl_accelerator_intel extends ffi.Opaque {}

class _cl_motion_estimation_desc_intel extends ffi.Struct {
  @cl_uint()
  external int mb_block_type;

  @cl_uint()
  external int subpixel_mode;

  @cl_uint()
  external int sad_adjust_mode;

  @cl_uint()
  external int search_path_type;
}

typedef cl_accelerator_intel = ffi.Pointer<_cl_accelerator_intel>;
typedef cl_accelerator_type_intel = cl_uint;
typedef cl_accelerator_info_intel = cl_uint;
typedef cl_mem_properties_intel = cl_properties;
typedef cl_mem_info_intel = cl_uint;
typedef cl_mem_advice_intel = cl_uint;

class _cl_queue_family_properties_intel extends ffi.Struct {
  @cl_command_queue_properties()
  external int properties;

  @cl_command_queue_capabilities_intel()
  external int capabilities;

  @cl_uint()
  external int count;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> name;
}

typedef cl_command_queue_capabilities_intel = cl_bitfield;
typedef cl_image_requirements_info_ext = cl_uint;

const int CL_VERSION_3_0 = 1;

const int CL_VERSION_2_2 = 1;

const int CL_VERSION_2_1 = 1;

const int CL_VERSION_2_0 = 1;

const int CL_VERSION_1_2 = 1;

const int CL_VERSION_1_1 = 1;

const int CL_VERSION_1_0 = 1;

const int CL_CHAR_BIT = 8;

const int CL_SCHAR_MAX = 127;

const int CL_SCHAR_MIN = -128;

const int CL_CHAR_MAX = 127;

const int CL_CHAR_MIN = -128;

const int CL_UCHAR_MAX = 255;

const int CL_SHRT_MAX = 32767;

const int CL_SHRT_MIN = -32768;

const int CL_USHRT_MAX = 65535;

const int CL_INT_MAX = 2147483647;

const int CL_INT_MIN = -2147483648;

const int CL_UINT_MAX = 4294967295;

const int CL_LONG_MAX = 9223372036854775807;

const int CL_LONG_MIN = -9223372036854775808;

const int CL_ULONG_MAX = -1;

const int CL_FLT_DIG = 6;

const int CL_FLT_MANT_DIG = 24;

const int CL_FLT_MAX_10_EXP = 38;

const int CL_FLT_MAX_EXP = 128;

const int CL_FLT_MIN_10_EXP = -37;

const int CL_FLT_MIN_EXP = -125;

const int CL_FLT_RADIX = 2;

const double CL_FLT_MAX = 3.4028234663852886e+38;

const double CL_FLT_MIN = 1.1754943508222875e-38;

const double CL_FLT_EPSILON = 1.1920928955078125e-7;

const int CL_HALF_DIG = 3;

const int CL_HALF_MANT_DIG = 11;

const int CL_HALF_MAX_10_EXP = 4;

const int CL_HALF_MAX_EXP = 16;

const int CL_HALF_MIN_10_EXP = -4;

const int CL_HALF_MIN_EXP = -13;

const int CL_HALF_RADIX = 2;

const double CL_HALF_MAX = 65504.0;

const double CL_HALF_MIN = 0.00006103515625;

const double CL_HALF_EPSILON = 0.0009765625;

const int CL_DBL_DIG = 15;

const int CL_DBL_MANT_DIG = 53;

const int CL_DBL_MAX_10_EXP = 308;

const int CL_DBL_MAX_EXP = 1024;

const int CL_DBL_MIN_10_EXP = -307;

const int CL_DBL_MIN_EXP = -1021;

const int CL_DBL_RADIX = 2;

const double CL_DBL_MAX = 1.7976931348623157e+308;

const double CL_DBL_MIN = 2.2250738585072014e-308;

const double CL_DBL_EPSILON = 2.220446049250313e-16;

const double CL_M_E = 2.718281828459045;

const double CL_M_LOG2E = 1.4426950408889634;

const double CL_M_LOG10E = 0.4342944819032518;

const double CL_M_LN2 = 0.6931471805599453;

const double CL_M_LN10 = 2.302585092994046;

const double CL_M_PI = 3.141592653589793;

const double CL_M_PI_2 = 1.5707963267948966;

const double CL_M_PI_4 = 0.7853981633974483;

const double CL_M_1_PI = 0.3183098861837907;

const double CL_M_2_PI = 0.6366197723675814;

const double CL_M_2_SQRTPI = 1.1283791670955126;

const double CL_M_SQRT2 = 1.4142135623730951;

const double CL_M_SQRT1_2 = 0.7071067811865476;

const double CL_M_E_F = 2.7182817459106445;

const double CL_M_LOG2E_F = 1.4426950216293335;

const double CL_M_LOG10E_F = 0.4342944920063019;

const double CL_M_LN2_F = 0.6931471824645996;

const double CL_M_LN10_F = 2.3025851249694824;

const double CL_M_PI_F = 3.1415927410125732;

const double CL_M_PI_2_F = 1.5707963705062866;

const double CL_M_PI_4_F = 0.7853981852531433;

const double CL_M_1_PI_F = 0.31830987334251404;

const double CL_M_2_PI_F = 0.6366197466850281;

const double CL_M_2_SQRTPI_F = 1.128379225730896;

const double CL_M_SQRT2_F = 1.4142135381698608;

const double CL_M_SQRT1_2_F = 0.7071067690849304;

const double CL_HUGE_VALF = double.infinity;

const double CL_HUGE_VAL = double.infinity;

const double CL_NAN = double.nan;

const double CL_MAXFLOAT = 3.4028234663852886e+38;

const double CL_INFINITY = double.infinity;

const int __CL_FLOAT4__ = 1;

const int __CL_UCHAR16__ = 1;

const int __CL_CHAR16__ = 1;

const int __CL_USHORT8__ = 1;

const int __CL_SHORT8__ = 1;

const int __CL_INT4__ = 1;

const int __CL_UINT4__ = 1;

const int __CL_ULONG2__ = 1;

const int __CL_LONG2__ = 1;

const int __CL_DOUBLE2__ = 1;

const int __CL_UCHAR8__ = 1;

const int __CL_CHAR8__ = 1;

const int __CL_USHORT4__ = 1;

const int __CL_SHORT4__ = 1;

const int __CL_INT2__ = 1;

const int __CL_UINT2__ = 1;

const int __CL_ULONG1__ = 1;

const int __CL_LONG1__ = 1;

const int __CL_FLOAT2__ = 1;

const int __CL_HAS_ANON_STRUCT__ = 1;

const int CL_HAS_NAMED_VECTOR_FIELDS = 1;

const int CL_HAS_HI_LO_VECTOR_FIELDS = 1;

const String CL_PROGRAM_STRING_DEBUG_INFO =
    '#line 141 "temp_for_macros.hpp" \n\n';

const int CL_NAME_VERSION_MAX_NAME_SIZE = 64;

const int CL_SUCCESS = 0;

const int CL_DEVICE_NOT_FOUND = -1;

const int CL_DEVICE_NOT_AVAILABLE = -2;

const int CL_COMPILER_NOT_AVAILABLE = -3;

const int CL_MEM_OBJECT_ALLOCATION_FAILURE = -4;

const int CL_OUT_OF_RESOURCES = -5;

const int CL_OUT_OF_HOST_MEMORY = -6;

const int CL_PROFILING_INFO_NOT_AVAILABLE = -7;

const int CL_MEM_COPY_OVERLAP = -8;

const int CL_IMAGE_FORMAT_MISMATCH = -9;

const int CL_IMAGE_FORMAT_NOT_SUPPORTED = -10;

const int CL_BUILD_PROGRAM_FAILURE = -11;

const int CL_MAP_FAILURE = -12;

const int CL_MISALIGNED_SUB_BUFFER_OFFSET = -13;

const int CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST = -14;

const int CL_COMPILE_PROGRAM_FAILURE = -15;

const int CL_LINKER_NOT_AVAILABLE = -16;

const int CL_LINK_PROGRAM_FAILURE = -17;

const int CL_DEVICE_PARTITION_FAILED = -18;

const int CL_KERNEL_ARG_INFO_NOT_AVAILABLE = -19;

const int CL_INVALID_VALUE = -30;

const int CL_INVALID_DEVICE_TYPE = -31;

const int CL_INVALID_PLATFORM = -32;

const int CL_INVALID_DEVICE = -33;

const int CL_INVALID_CONTEXT = -34;

const int CL_INVALID_QUEUE_PROPERTIES = -35;

const int CL_INVALID_COMMAND_QUEUE = -36;

const int CL_INVALID_HOST_PTR = -37;

const int CL_INVALID_MEM_OBJECT = -38;

const int CL_INVALID_IMAGE_FORMAT_DESCRIPTOR = -39;

const int CL_INVALID_IMAGE_SIZE = -40;

const int CL_INVALID_SAMPLER = -41;

const int CL_INVALID_BINARY = -42;

const int CL_INVALID_BUILD_OPTIONS = -43;

const int CL_INVALID_PROGRAM = -44;

const int CL_INVALID_PROGRAM_EXECUTABLE = -45;

const int CL_INVALID_KERNEL_NAME = -46;

const int CL_INVALID_KERNEL_DEFINITION = -47;

const int CL_INVALID_KERNEL = -48;

const int CL_INVALID_ARG_INDEX = -49;

const int CL_INVALID_ARG_VALUE = -50;

const int CL_INVALID_ARG_SIZE = -51;

const int CL_INVALID_KERNEL_ARGS = -52;

const int CL_INVALID_WORK_DIMENSION = -53;

const int CL_INVALID_WORK_GROUP_SIZE = -54;

const int CL_INVALID_WORK_ITEM_SIZE = -55;

const int CL_INVALID_GLOBAL_OFFSET = -56;

const int CL_INVALID_EVENT_WAIT_LIST = -57;

const int CL_INVALID_EVENT = -58;

const int CL_INVALID_OPERATION = -59;

const int CL_INVALID_GL_OBJECT = -60;

const int CL_INVALID_BUFFER_SIZE = -61;

const int CL_INVALID_MIP_LEVEL = -62;

const int CL_INVALID_GLOBAL_WORK_SIZE = -63;

const int CL_INVALID_PROPERTY = -64;

const int CL_INVALID_IMAGE_DESCRIPTOR = -65;

const int CL_INVALID_COMPILER_OPTIONS = -66;

const int CL_INVALID_LINKER_OPTIONS = -67;

const int CL_INVALID_DEVICE_PARTITION_COUNT = -68;

const int CL_INVALID_PIPE_SIZE = -69;

const int CL_INVALID_DEVICE_QUEUE = -70;

const int CL_INVALID_SPEC_ID = -71;

const int CL_MAX_SIZE_RESTRICTION_EXCEEDED = -72;

const int CL_FALSE = 0;

const int CL_TRUE = 1;

const int CL_BLOCKING = 1;

const int CL_NON_BLOCKING = 0;

const int CL_PLATFORM_PROFILE = 2304;

const int CL_PLATFORM_VERSION = 2305;

const int CL_PLATFORM_NAME = 2306;

const int CL_PLATFORM_VENDOR = 2307;

const int CL_PLATFORM_EXTENSIONS = 2308;

const int CL_PLATFORM_HOST_TIMER_RESOLUTION = 2309;

const int CL_PLATFORM_NUMERIC_VERSION = 2310;

const int CL_PLATFORM_EXTENSIONS_WITH_VERSION = 2311;

const int CL_DEVICE_TYPE_DEFAULT = 1;

const int CL_DEVICE_TYPE_CPU = 2;

const int CL_DEVICE_TYPE_GPU = 4;

const int CL_DEVICE_TYPE_ACCELERATOR = 8;

const int CL_DEVICE_TYPE_CUSTOM = 16;

const int CL_DEVICE_TYPE_ALL = 4294967295;

const int CL_DEVICE_TYPE = 4096;

const int CL_DEVICE_VENDOR_ID = 4097;

const int CL_DEVICE_MAX_COMPUTE_UNITS = 4098;

const int CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS = 4099;

const int CL_DEVICE_MAX_WORK_GROUP_SIZE = 4100;

const int CL_DEVICE_MAX_WORK_ITEM_SIZES = 4101;

const int CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR = 4102;

const int CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT = 4103;

const int CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT = 4104;

const int CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG = 4105;

const int CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT = 4106;

const int CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE = 4107;

const int CL_DEVICE_MAX_CLOCK_FREQUENCY = 4108;

const int CL_DEVICE_ADDRESS_BITS = 4109;

const int CL_DEVICE_MAX_READ_IMAGE_ARGS = 4110;

const int CL_DEVICE_MAX_WRITE_IMAGE_ARGS = 4111;

const int CL_DEVICE_MAX_MEM_ALLOC_SIZE = 4112;

const int CL_DEVICE_IMAGE2D_MAX_WIDTH = 4113;

const int CL_DEVICE_IMAGE2D_MAX_HEIGHT = 4114;

const int CL_DEVICE_IMAGE3D_MAX_WIDTH = 4115;

const int CL_DEVICE_IMAGE3D_MAX_HEIGHT = 4116;

const int CL_DEVICE_IMAGE3D_MAX_DEPTH = 4117;

const int CL_DEVICE_IMAGE_SUPPORT = 4118;

const int CL_DEVICE_MAX_PARAMETER_SIZE = 4119;

const int CL_DEVICE_MAX_SAMPLERS = 4120;

const int CL_DEVICE_MEM_BASE_ADDR_ALIGN = 4121;

const int CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE = 4122;

const int CL_DEVICE_SINGLE_FP_CONFIG = 4123;

const int CL_DEVICE_GLOBAL_MEM_CACHE_TYPE = 4124;

const int CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE = 4125;

const int CL_DEVICE_GLOBAL_MEM_CACHE_SIZE = 4126;

const int CL_DEVICE_GLOBAL_MEM_SIZE = 4127;

const int CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE = 4128;

const int CL_DEVICE_MAX_CONSTANT_ARGS = 4129;

const int CL_DEVICE_LOCAL_MEM_TYPE = 4130;

const int CL_DEVICE_LOCAL_MEM_SIZE = 4131;

const int CL_DEVICE_ERROR_CORRECTION_SUPPORT = 4132;

const int CL_DEVICE_PROFILING_TIMER_RESOLUTION = 4133;

const int CL_DEVICE_ENDIAN_LITTLE = 4134;

const int CL_DEVICE_AVAILABLE = 4135;

const int CL_DEVICE_COMPILER_AVAILABLE = 4136;

const int CL_DEVICE_EXECUTION_CAPABILITIES = 4137;

const int CL_DEVICE_QUEUE_PROPERTIES = 4138;

const int CL_DEVICE_QUEUE_ON_HOST_PROPERTIES = 4138;

const int CL_DEVICE_NAME = 4139;

const int CL_DEVICE_VENDOR = 4140;

const int CL_DRIVER_VERSION = 4141;

const int CL_DEVICE_PROFILE = 4142;

const int CL_DEVICE_VERSION = 4143;

const int CL_DEVICE_EXTENSIONS = 4144;

const int CL_DEVICE_PLATFORM = 4145;

const int CL_DEVICE_DOUBLE_FP_CONFIG = 4146;

const int CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF = 4148;

const int CL_DEVICE_HOST_UNIFIED_MEMORY = 4149;

const int CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR = 4150;

const int CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT = 4151;

const int CL_DEVICE_NATIVE_VECTOR_WIDTH_INT = 4152;

const int CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG = 4153;

const int CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT = 4154;

const int CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE = 4155;

const int CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF = 4156;

const int CL_DEVICE_OPENCL_C_VERSION = 4157;

const int CL_DEVICE_LINKER_AVAILABLE = 4158;

const int CL_DEVICE_BUILT_IN_KERNELS = 4159;

const int CL_DEVICE_IMAGE_MAX_BUFFER_SIZE = 4160;

const int CL_DEVICE_IMAGE_MAX_ARRAY_SIZE = 4161;

const int CL_DEVICE_PARENT_DEVICE = 4162;

const int CL_DEVICE_PARTITION_MAX_SUB_DEVICES = 4163;

const int CL_DEVICE_PARTITION_PROPERTIES = 4164;

const int CL_DEVICE_PARTITION_AFFINITY_DOMAIN = 4165;

const int CL_DEVICE_PARTITION_TYPE = 4166;

const int CL_DEVICE_REFERENCE_COUNT = 4167;

const int CL_DEVICE_PREFERRED_INTEROP_USER_SYNC = 4168;

const int CL_DEVICE_PRINTF_BUFFER_SIZE = 4169;

const int CL_DEVICE_IMAGE_PITCH_ALIGNMENT = 4170;

const int CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT = 4171;

const int CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS = 4172;

const int CL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE = 4173;

const int CL_DEVICE_QUEUE_ON_DEVICE_PROPERTIES = 4174;

const int CL_DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE = 4175;

const int CL_DEVICE_QUEUE_ON_DEVICE_MAX_SIZE = 4176;

const int CL_DEVICE_MAX_ON_DEVICE_QUEUES = 4177;

const int CL_DEVICE_MAX_ON_DEVICE_EVENTS = 4178;

const int CL_DEVICE_SVM_CAPABILITIES = 4179;

const int CL_DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE = 4180;

const int CL_DEVICE_MAX_PIPE_ARGS = 4181;

const int CL_DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS = 4182;

const int CL_DEVICE_PIPE_MAX_PACKET_SIZE = 4183;

const int CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT = 4184;

const int CL_DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT = 4185;

const int CL_DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT = 4186;

const int CL_DEVICE_IL_VERSION = 4187;

const int CL_DEVICE_MAX_NUM_SUB_GROUPS = 4188;

const int CL_DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS = 4189;

const int CL_DEVICE_NUMERIC_VERSION = 4190;

const int CL_DEVICE_EXTENSIONS_WITH_VERSION = 4192;

const int CL_DEVICE_ILS_WITH_VERSION = 4193;

const int CL_DEVICE_BUILT_IN_KERNELS_WITH_VERSION = 4194;

const int CL_DEVICE_ATOMIC_MEMORY_CAPABILITIES = 4195;

const int CL_DEVICE_ATOMIC_FENCE_CAPABILITIES = 4196;

const int CL_DEVICE_NON_UNIFORM_WORK_GROUP_SUPPORT = 4197;

const int CL_DEVICE_OPENCL_C_ALL_VERSIONS = 4198;

const int CL_DEVICE_PREFERRED_WORK_GROUP_SIZE_MULTIPLE = 4199;

const int CL_DEVICE_WORK_GROUP_COLLECTIVE_FUNCTIONS_SUPPORT = 4200;

const int CL_DEVICE_GENERIC_ADDRESS_SPACE_SUPPORT = 4201;

const int CL_DEVICE_OPENCL_C_FEATURES = 4207;

const int CL_DEVICE_DEVICE_ENQUEUE_CAPABILITIES = 4208;

const int CL_DEVICE_PIPE_SUPPORT = 4209;

const int CL_DEVICE_LATEST_CONFORMANCE_VERSION_PASSED = 4210;

const int CL_FP_DENORM = 1;

const int CL_FP_INF_NAN = 2;

const int CL_FP_ROUND_TO_NEAREST = 4;

const int CL_FP_ROUND_TO_ZERO = 8;

const int CL_FP_ROUND_TO_INF = 16;

const int CL_FP_FMA = 32;

const int CL_FP_SOFT_FLOAT = 64;

const int CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT = 128;

const int CL_NONE = 0;

const int CL_READ_ONLY_CACHE = 1;

const int CL_READ_WRITE_CACHE = 2;

const int CL_LOCAL = 1;

const int CL_GLOBAL = 2;

const int CL_EXEC_KERNEL = 1;

const int CL_EXEC_NATIVE_KERNEL = 2;

const int CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE = 1;

const int CL_QUEUE_PROFILING_ENABLE = 2;

const int CL_QUEUE_ON_DEVICE = 4;

const int CL_QUEUE_ON_DEVICE_DEFAULT = 8;

const int CL_CONTEXT_REFERENCE_COUNT = 4224;

const int CL_CONTEXT_DEVICES = 4225;

const int CL_CONTEXT_PROPERTIES = 4226;

const int CL_CONTEXT_NUM_DEVICES = 4227;

const int CL_CONTEXT_PLATFORM = 4228;

const int CL_CONTEXT_INTEROP_USER_SYNC = 4229;

const int CL_DEVICE_PARTITION_EQUALLY = 4230;

const int CL_DEVICE_PARTITION_BY_COUNTS = 4231;

const int CL_DEVICE_PARTITION_BY_COUNTS_LIST_END = 0;

const int CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN = 4232;

const int CL_DEVICE_AFFINITY_DOMAIN_NUMA = 1;

const int CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE = 2;

const int CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE = 4;

const int CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE = 8;

const int CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE = 16;

const int CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE = 32;

const int CL_DEVICE_SVM_COARSE_GRAIN_BUFFER = 1;

const int CL_DEVICE_SVM_FINE_GRAIN_BUFFER = 2;

const int CL_DEVICE_SVM_FINE_GRAIN_SYSTEM = 4;

const int CL_DEVICE_SVM_ATOMICS = 8;

const int CL_QUEUE_CONTEXT = 4240;

const int CL_QUEUE_DEVICE = 4241;

const int CL_QUEUE_REFERENCE_COUNT = 4242;

const int CL_QUEUE_PROPERTIES = 4243;

const int CL_QUEUE_SIZE = 4244;

const int CL_QUEUE_DEVICE_DEFAULT = 4245;

const int CL_QUEUE_PROPERTIES_ARRAY = 4248;

const int CL_MEM_READ_WRITE = 1;

const int CL_MEM_WRITE_ONLY = 2;

const int CL_MEM_READ_ONLY = 4;

const int CL_MEM_USE_HOST_PTR = 8;

const int CL_MEM_ALLOC_HOST_PTR = 16;

const int CL_MEM_COPY_HOST_PTR = 32;

const int CL_MEM_HOST_WRITE_ONLY = 128;

const int CL_MEM_HOST_READ_ONLY = 256;

const int CL_MEM_HOST_NO_ACCESS = 512;

const int CL_MEM_SVM_FINE_GRAIN_BUFFER = 1024;

const int CL_MEM_SVM_ATOMICS = 2048;

const int CL_MEM_KERNEL_READ_AND_WRITE = 4096;

const int CL_MIGRATE_MEM_OBJECT_HOST = 1;

const int CL_MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED = 2;

const int CL_R = 4272;

const int CL_A = 4273;

const int CL_RG = 4274;

const int CL_RA = 4275;

const int CL_RGB = 4276;

const int CL_RGBA = 4277;

const int CL_BGRA = 4278;

const int CL_ARGB = 4279;

const int CL_INTENSITY = 4280;

const int CL_LUMINANCE = 4281;

const int CL_Rx = 4282;

const int CL_RGx = 4283;

const int CL_RGBx = 4284;

const int CL_DEPTH = 4285;

const int CL_DEPTH_STENCIL = 4286;

const int CL_sRGB = 4287;

const int CL_sRGBx = 4288;

const int CL_sRGBA = 4289;

const int CL_sBGRA = 4290;

const int CL_ABGR = 4291;

const int CL_SNORM_INT8 = 4304;

const int CL_SNORM_INT16 = 4305;

const int CL_UNORM_INT8 = 4306;

const int CL_UNORM_INT16 = 4307;

const int CL_UNORM_SHORT_565 = 4308;

const int CL_UNORM_SHORT_555 = 4309;

const int CL_UNORM_INT_101010 = 4310;

const int CL_SIGNED_INT8 = 4311;

const int CL_SIGNED_INT16 = 4312;

const int CL_SIGNED_INT32 = 4313;

const int CL_UNSIGNED_INT8 = 4314;

const int CL_UNSIGNED_INT16 = 4315;

const int CL_UNSIGNED_INT32 = 4316;

const int CL_HALF_FLOAT = 4317;

const int CL_FLOAT = 4318;

const int CL_UNORM_INT24 = 4319;

const int CL_UNORM_INT_101010_2 = 4320;

const int CL_MEM_OBJECT_BUFFER = 4336;

const int CL_MEM_OBJECT_IMAGE2D = 4337;

const int CL_MEM_OBJECT_IMAGE3D = 4338;

const int CL_MEM_OBJECT_IMAGE2D_ARRAY = 4339;

const int CL_MEM_OBJECT_IMAGE1D = 4340;

const int CL_MEM_OBJECT_IMAGE1D_ARRAY = 4341;

const int CL_MEM_OBJECT_IMAGE1D_BUFFER = 4342;

const int CL_MEM_OBJECT_PIPE = 4343;

const int CL_MEM_TYPE = 4352;

const int CL_MEM_FLAGS = 4353;

const int CL_MEM_SIZE = 4354;

const int CL_MEM_HOST_PTR = 4355;

const int CL_MEM_MAP_COUNT = 4356;

const int CL_MEM_REFERENCE_COUNT = 4357;

const int CL_MEM_CONTEXT = 4358;

const int CL_MEM_ASSOCIATED_MEMOBJECT = 4359;

const int CL_MEM_OFFSET = 4360;

const int CL_MEM_USES_SVM_POINTER = 4361;

const int CL_MEM_PROPERTIES = 4362;

const int CL_IMAGE_FORMAT = 4368;

const int CL_IMAGE_ELEMENT_SIZE = 4369;

const int CL_IMAGE_ROW_PITCH = 4370;

const int CL_IMAGE_SLICE_PITCH = 4371;

const int CL_IMAGE_WIDTH = 4372;

const int CL_IMAGE_HEIGHT = 4373;

const int CL_IMAGE_DEPTH = 4374;

const int CL_IMAGE_ARRAY_SIZE = 4375;

const int CL_IMAGE_BUFFER = 4376;

const int CL_IMAGE_NUM_MIP_LEVELS = 4377;

const int CL_IMAGE_NUM_SAMPLES = 4378;

const int CL_PIPE_PACKET_SIZE = 4384;

const int CL_PIPE_MAX_PACKETS = 4385;

const int CL_PIPE_PROPERTIES = 4386;

const int CL_ADDRESS_NONE = 4400;

const int CL_ADDRESS_CLAMP_TO_EDGE = 4401;

const int CL_ADDRESS_CLAMP = 4402;

const int CL_ADDRESS_REPEAT = 4403;

const int CL_ADDRESS_MIRRORED_REPEAT = 4404;

const int CL_FILTER_NEAREST = 4416;

const int CL_FILTER_LINEAR = 4417;

const int CL_SAMPLER_REFERENCE_COUNT = 4432;

const int CL_SAMPLER_CONTEXT = 4433;

const int CL_SAMPLER_NORMALIZED_COORDS = 4434;

const int CL_SAMPLER_ADDRESSING_MODE = 4435;

const int CL_SAMPLER_FILTER_MODE = 4436;

const int CL_SAMPLER_MIP_FILTER_MODE = 4437;

const int CL_SAMPLER_LOD_MIN = 4438;

const int CL_SAMPLER_LOD_MAX = 4439;

const int CL_SAMPLER_PROPERTIES = 4440;

const int CL_MAP_READ = 1;

const int CL_MAP_WRITE = 2;

const int CL_MAP_WRITE_INVALIDATE_REGION = 4;

const int CL_PROGRAM_REFERENCE_COUNT = 4448;

const int CL_PROGRAM_CONTEXT = 4449;

const int CL_PROGRAM_NUM_DEVICES = 4450;

const int CL_PROGRAM_DEVICES = 4451;

const int CL_PROGRAM_SOURCE = 4452;

const int CL_PROGRAM_BINARY_SIZES = 4453;

const int CL_PROGRAM_BINARIES = 4454;

const int CL_PROGRAM_NUM_KERNELS = 4455;

const int CL_PROGRAM_KERNEL_NAMES = 4456;

const int CL_PROGRAM_IL = 4457;

const int CL_PROGRAM_SCOPE_GLOBAL_CTORS_PRESENT = 4458;

const int CL_PROGRAM_SCOPE_GLOBAL_DTORS_PRESENT = 4459;

const int CL_PROGRAM_BUILD_STATUS = 4481;

const int CL_PROGRAM_BUILD_OPTIONS = 4482;

const int CL_PROGRAM_BUILD_LOG = 4483;

const int CL_PROGRAM_BINARY_TYPE = 4484;

const int CL_PROGRAM_BUILD_GLOBAL_VARIABLE_TOTAL_SIZE = 4485;

const int CL_PROGRAM_BINARY_TYPE_NONE = 0;

const int CL_PROGRAM_BINARY_TYPE_COMPILED_OBJECT = 1;

const int CL_PROGRAM_BINARY_TYPE_LIBRARY = 2;

const int CL_PROGRAM_BINARY_TYPE_EXECUTABLE = 4;

const int CL_BUILD_SUCCESS = 0;

const int CL_BUILD_NONE = -1;

const int CL_BUILD_ERROR = -2;

const int CL_BUILD_IN_PROGRESS = -3;

const int CL_KERNEL_FUNCTION_NAME = 4496;

const int CL_KERNEL_NUM_ARGS = 4497;

const int CL_KERNEL_REFERENCE_COUNT = 4498;

const int CL_KERNEL_CONTEXT = 4499;

const int CL_KERNEL_PROGRAM = 4500;

const int CL_KERNEL_ATTRIBUTES = 4501;

const int CL_KERNEL_ARG_ADDRESS_QUALIFIER = 4502;

const int CL_KERNEL_ARG_ACCESS_QUALIFIER = 4503;

const int CL_KERNEL_ARG_TYPE_NAME = 4504;

const int CL_KERNEL_ARG_TYPE_QUALIFIER = 4505;

const int CL_KERNEL_ARG_NAME = 4506;

const int CL_KERNEL_ARG_ADDRESS_GLOBAL = 4507;

const int CL_KERNEL_ARG_ADDRESS_LOCAL = 4508;

const int CL_KERNEL_ARG_ADDRESS_CONSTANT = 4509;

const int CL_KERNEL_ARG_ADDRESS_PRIVATE = 4510;

const int CL_KERNEL_ARG_ACCESS_READ_ONLY = 4512;

const int CL_KERNEL_ARG_ACCESS_WRITE_ONLY = 4513;

const int CL_KERNEL_ARG_ACCESS_READ_WRITE = 4514;

const int CL_KERNEL_ARG_ACCESS_NONE = 4515;

const int CL_KERNEL_ARG_TYPE_NONE = 0;

const int CL_KERNEL_ARG_TYPE_CONST = 1;

const int CL_KERNEL_ARG_TYPE_RESTRICT = 2;

const int CL_KERNEL_ARG_TYPE_VOLATILE = 4;

const int CL_KERNEL_ARG_TYPE_PIPE = 8;

const int CL_KERNEL_WORK_GROUP_SIZE = 4528;

const int CL_KERNEL_COMPILE_WORK_GROUP_SIZE = 4529;

const int CL_KERNEL_LOCAL_MEM_SIZE = 4530;

const int CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE = 4531;

const int CL_KERNEL_PRIVATE_MEM_SIZE = 4532;

const int CL_KERNEL_GLOBAL_WORK_SIZE = 4533;

const int CL_KERNEL_MAX_SUB_GROUP_SIZE_FOR_NDRANGE = 8243;

const int CL_KERNEL_SUB_GROUP_COUNT_FOR_NDRANGE = 8244;

const int CL_KERNEL_LOCAL_SIZE_FOR_SUB_GROUP_COUNT = 4536;

const int CL_KERNEL_MAX_NUM_SUB_GROUPS = 4537;

const int CL_KERNEL_COMPILE_NUM_SUB_GROUPS = 4538;

const int CL_KERNEL_EXEC_INFO_SVM_PTRS = 4534;

const int CL_KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM = 4535;

const int CL_EVENT_COMMAND_QUEUE = 4560;

const int CL_EVENT_COMMAND_TYPE = 4561;

const int CL_EVENT_REFERENCE_COUNT = 4562;

const int CL_EVENT_COMMAND_EXECUTION_STATUS = 4563;

const int CL_EVENT_CONTEXT = 4564;

const int CL_COMMAND_NDRANGE_KERNEL = 4592;

const int CL_COMMAND_TASK = 4593;

const int CL_COMMAND_NATIVE_KERNEL = 4594;

const int CL_COMMAND_READ_BUFFER = 4595;

const int CL_COMMAND_WRITE_BUFFER = 4596;

const int CL_COMMAND_COPY_BUFFER = 4597;

const int CL_COMMAND_READ_IMAGE = 4598;

const int CL_COMMAND_WRITE_IMAGE = 4599;

const int CL_COMMAND_COPY_IMAGE = 4600;

const int CL_COMMAND_COPY_IMAGE_TO_BUFFER = 4601;

const int CL_COMMAND_COPY_BUFFER_TO_IMAGE = 4602;

const int CL_COMMAND_MAP_BUFFER = 4603;

const int CL_COMMAND_MAP_IMAGE = 4604;

const int CL_COMMAND_UNMAP_MEM_OBJECT = 4605;

const int CL_COMMAND_MARKER = 4606;

const int CL_COMMAND_ACQUIRE_GL_OBJECTS = 4607;

const int CL_COMMAND_RELEASE_GL_OBJECTS = 4608;

const int CL_COMMAND_READ_BUFFER_RECT = 4609;

const int CL_COMMAND_WRITE_BUFFER_RECT = 4610;

const int CL_COMMAND_COPY_BUFFER_RECT = 4611;

const int CL_COMMAND_USER = 4612;

const int CL_COMMAND_BARRIER = 4613;

const int CL_COMMAND_MIGRATE_MEM_OBJECTS = 4614;

const int CL_COMMAND_FILL_BUFFER = 4615;

const int CL_COMMAND_FILL_IMAGE = 4616;

const int CL_COMMAND_SVM_FREE = 4617;

const int CL_COMMAND_SVM_MEMCPY = 4618;

const int CL_COMMAND_SVM_MEMFILL = 4619;

const int CL_COMMAND_SVM_MAP = 4620;

const int CL_COMMAND_SVM_UNMAP = 4621;

const int CL_COMMAND_SVM_MIGRATE_MEM = 4622;

const int CL_COMPLETE = 0;

const int CL_RUNNING = 1;

const int CL_SUBMITTED = 2;

const int CL_QUEUED = 3;

const int CL_BUFFER_CREATE_TYPE_REGION = 4640;

const int CL_PROFILING_COMMAND_QUEUED = 4736;

const int CL_PROFILING_COMMAND_SUBMIT = 4737;

const int CL_PROFILING_COMMAND_START = 4738;

const int CL_PROFILING_COMMAND_END = 4739;

const int CL_PROFILING_COMMAND_COMPLETE = 4740;

const int CL_DEVICE_ATOMIC_ORDER_RELAXED = 1;

const int CL_DEVICE_ATOMIC_ORDER_ACQ_REL = 2;

const int CL_DEVICE_ATOMIC_ORDER_SEQ_CST = 4;

const int CL_DEVICE_ATOMIC_SCOPE_WORK_ITEM = 8;

const int CL_DEVICE_ATOMIC_SCOPE_WORK_GROUP = 16;

const int CL_DEVICE_ATOMIC_SCOPE_DEVICE = 32;

const int CL_DEVICE_ATOMIC_SCOPE_ALL_DEVICES = 64;

const int CL_DEVICE_QUEUE_SUPPORTED = 1;

const int CL_DEVICE_QUEUE_REPLACEABLE_DEFAULT = 2;

const int CL_KHRONOS_VENDOR_ID_CODEPLAY = 65540;

const int CL_VERSION_MAJOR_BITS = 10;

const int CL_VERSION_MINOR_BITS = 10;

const int CL_VERSION_PATCH_BITS = 12;

const int CL_VERSION_MAJOR_MASK = 1023;

const int CL_VERSION_MINOR_MASK = 1023;

const int CL_VERSION_PATCH_MASK = 4095;

const int CL_GL_OBJECT_BUFFER = 8192;

const int CL_GL_OBJECT_TEXTURE2D = 8193;

const int CL_GL_OBJECT_TEXTURE3D = 8194;

const int CL_GL_OBJECT_RENDERBUFFER = 8195;

const int CL_GL_OBJECT_TEXTURE2D_ARRAY = 8206;

const int CL_GL_OBJECT_TEXTURE1D = 8207;

const int CL_GL_OBJECT_TEXTURE1D_ARRAY = 8208;

const int CL_GL_OBJECT_TEXTURE_BUFFER = 8209;

const int CL_GL_TEXTURE_TARGET = 8196;

const int CL_GL_MIPMAP_LEVEL = 8197;

const int CL_GL_NUM_SAMPLES = 8210;

const int cl_khr_gl_sharing = 1;

const int CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR = -1000;

const int CL_CURRENT_DEVICE_FOR_GL_CONTEXT_KHR = 8198;

const int CL_DEVICES_FOR_GL_CONTEXT_KHR = 8199;

const int CL_GL_CONTEXT_KHR = 8200;

const int CL_EGL_DISPLAY_KHR = 8201;

const int CL_GLX_DISPLAY_KHR = 8202;

const int CL_WGL_HDC_KHR = 8203;

const int CL_CGL_SHAREGROUP_KHR = 8204;

const int CL_COMMAND_GL_FENCE_SYNC_OBJECT_KHR = 8205;

const int cl_intel_sharing_format_query_gl = 1;

const int cl_khr_command_buffer = 1;

const String CL_KHR_COMMAND_BUFFER_EXTENSION_NAME = 'cl_khr_command_buffer';

const int CL_DEVICE_COMMAND_BUFFER_CAPABILITIES_KHR = 4777;

const int CL_DEVICE_COMMAND_BUFFER_REQUIRED_QUEUE_PROPERTIES_KHR = 4778;

const int CL_COMMAND_BUFFER_CAPABILITY_KERNEL_PRINTF_KHR = 1;

const int CL_COMMAND_BUFFER_CAPABILITY_DEVICE_SIDE_ENQUEUE_KHR = 2;

const int CL_COMMAND_BUFFER_CAPABILITY_SIMULTANEOUS_USE_KHR = 4;

const int CL_COMMAND_BUFFER_CAPABILITY_OUT_OF_ORDER_KHR = 8;

const int CL_COMMAND_BUFFER_FLAGS_KHR = 4755;

const int CL_COMMAND_BUFFER_SIMULTANEOUS_USE_KHR = 1;

const int CL_INVALID_COMMAND_BUFFER_KHR = -1138;

const int CL_INVALID_SYNC_POINT_WAIT_LIST_KHR = -1139;

const int CL_INCOMPATIBLE_COMMAND_QUEUE_KHR = -1140;

const int CL_COMMAND_BUFFER_QUEUES_KHR = 4756;

const int CL_COMMAND_BUFFER_NUM_QUEUES_KHR = 4757;

const int CL_COMMAND_BUFFER_REFERENCE_COUNT_KHR = 4758;

const int CL_COMMAND_BUFFER_STATE_KHR = 4759;

const int CL_COMMAND_BUFFER_PROPERTIES_ARRAY_KHR = 4760;

const int CL_COMMAND_BUFFER_STATE_RECORDING_KHR = 0;

const int CL_COMMAND_BUFFER_STATE_EXECUTABLE_KHR = 1;

const int CL_COMMAND_BUFFER_STATE_PENDING_KHR = 2;

const int CL_COMMAND_BUFFER_STATE_INVALID_KHR = 3;

const int CL_COMMAND_COMMAND_BUFFER_KHR = 4776;

const int CL_DEVICE_HALF_FP_CONFIG = 4147;

const int cl_APPLE_SetMemObjectDestructor = 1;

const int cl_APPLE_ContextLoggingFunctions = 1;

const int cl_khr_icd = 1;

const int CL_PLATFORM_ICD_SUFFIX_KHR = 2336;

const int CL_PLATFORM_NOT_FOUND_KHR = -1001;

const int cl_khr_il_program = 1;

const int CL_DEVICE_IL_VERSION_KHR = 4187;

const int CL_PROGRAM_IL_KHR = 4457;

const int CL_DEVICE_IMAGE_PITCH_ALIGNMENT_KHR = 4170;

const int CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT_KHR = 4171;

const int CL_CONTEXT_MEMORY_INITIALIZE_KHR = 8240;

const int CL_CONTEXT_TERMINATED_KHR = -1121;

const int CL_DEVICE_TERMINATE_CAPABILITY_KHR = 8241;

const int CL_CONTEXT_TERMINATE_KHR = 8242;

const int cl_khr_terminate_context = 1;

const int CL_DEVICE_SPIR_VERSIONS = 16608;

const int CL_PROGRAM_BINARY_TYPE_INTERMEDIATE = 16609;

const int cl_khr_create_command_queue = 1;

const int CL_DEVICE_COMPUTE_CAPABILITY_MAJOR_NV = 16384;

const int CL_DEVICE_COMPUTE_CAPABILITY_MINOR_NV = 16385;

const int CL_DEVICE_REGISTERS_PER_BLOCK_NV = 16386;

const int CL_DEVICE_WARP_SIZE_NV = 16387;

const int CL_DEVICE_GPU_OVERLAP_NV = 16388;

const int CL_DEVICE_KERNEL_EXEC_TIMEOUT_NV = 16389;

const int CL_DEVICE_INTEGRATED_MEMORY_NV = 16390;

const int CL_DEVICE_PROFILING_TIMER_OFFSET_AMD = 16438;

const int CL_DEVICE_TOPOLOGY_AMD = 16439;

const int CL_DEVICE_BOARD_NAME_AMD = 16440;

const int CL_DEVICE_GLOBAL_FREE_MEMORY_AMD = 16441;

const int CL_DEVICE_SIMD_PER_COMPUTE_UNIT_AMD = 16448;

const int CL_DEVICE_SIMD_WIDTH_AMD = 16449;

const int CL_DEVICE_SIMD_INSTRUCTION_WIDTH_AMD = 16450;

const int CL_DEVICE_WAVEFRONT_WIDTH_AMD = 16451;

const int CL_DEVICE_GLOBAL_MEM_CHANNELS_AMD = 16452;

const int CL_DEVICE_GLOBAL_MEM_CHANNEL_BANKS_AMD = 16453;

const int CL_DEVICE_GLOBAL_MEM_CHANNEL_BANK_WIDTH_AMD = 16454;

const int CL_DEVICE_LOCAL_MEM_SIZE_PER_COMPUTE_UNIT_AMD = 16455;

const int CL_DEVICE_LOCAL_MEM_BANKS_AMD = 16456;

const int CL_DEVICE_THREAD_TRACE_SUPPORTED_AMD = 16457;

const int CL_DEVICE_GFXIP_MAJOR_AMD = 16458;

const int CL_DEVICE_GFXIP_MINOR_AMD = 16459;

const int CL_DEVICE_AVAILABLE_ASYNC_QUEUES_AMD = 16460;

const int CL_DEVICE_PREFERRED_WORK_GROUP_SIZE_AMD = 16432;

const int CL_DEVICE_MAX_WORK_GROUP_SIZE_AMD = 16433;

const int CL_DEVICE_PREFERRED_CONSTANT_BUFFER_SIZE_AMD = 16435;

const int CL_DEVICE_PCIE_ID_AMD = 16436;

const int CL_PRINTF_CALLBACK_ARM = 16560;

const int CL_PRINTF_BUFFERSIZE_ARM = 16561;

const int cl_ext_device_fission = 1;

const int CL_DEVICE_PARTITION_EQUALLY_EXT = 16464;

const int CL_DEVICE_PARTITION_BY_COUNTS_EXT = 16465;

const int CL_DEVICE_PARTITION_BY_NAMES_EXT = 16466;

const int CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN_EXT = 16467;

const int CL_DEVICE_PARENT_DEVICE_EXT = 16468;

const int CL_DEVICE_PARTITION_TYPES_EXT = 16469;

const int CL_DEVICE_AFFINITY_DOMAINS_EXT = 16470;

const int CL_DEVICE_REFERENCE_COUNT_EXT = 16471;

const int CL_DEVICE_PARTITION_STYLE_EXT = 16472;

const int CL_DEVICE_PARTITION_FAILED_EXT = -1057;

const int CL_INVALID_PARTITION_COUNT_EXT = -1058;

const int CL_INVALID_PARTITION_NAME_EXT = -1059;

const int CL_AFFINITY_DOMAIN_L1_CACHE_EXT = 1;

const int CL_AFFINITY_DOMAIN_L2_CACHE_EXT = 2;

const int CL_AFFINITY_DOMAIN_L3_CACHE_EXT = 3;

const int CL_AFFINITY_DOMAIN_L4_CACHE_EXT = 4;

const int CL_AFFINITY_DOMAIN_NUMA_EXT = 16;

const int CL_AFFINITY_DOMAIN_NEXT_FISSIONABLE_EXT = 256;

const int CL_PROPERTIES_LIST_END_EXT = 0;

const int CL_PARTITION_BY_COUNTS_LIST_END_EXT = 0;

const int CL_PARTITION_BY_NAMES_LIST_END_EXT = -1;

const int cl_ext_migrate_memobject = 1;

const int CL_MIGRATE_MEM_OBJECT_HOST_EXT = 1;

const int CL_COMMAND_MIGRATE_MEM_OBJECT_EXT = 16448;

const int cl_ext_cxx_for_opencl = 1;

const int CL_DEVICE_CXX_FOR_OPENCL_NUMERIC_VERSION_EXT = 16944;

const int cl_qcom_ext_host_ptr = 1;

const int CL_MEM_EXT_HOST_PTR_QCOM = 536870912;

const int CL_DEVICE_EXT_MEM_PADDING_IN_BYTES_QCOM = 16544;

const int CL_DEVICE_PAGE_SIZE_QCOM = 16545;

const int CL_IMAGE_ROW_ALIGNMENT_QCOM = 16546;

const int CL_IMAGE_SLICE_ALIGNMENT_QCOM = 16547;

const int CL_MEM_HOST_UNCACHED_QCOM = 16548;

const int CL_MEM_HOST_WRITEBACK_QCOM = 16549;

const int CL_MEM_HOST_WRITETHROUGH_QCOM = 16550;

const int CL_MEM_HOST_WRITE_COMBINING_QCOM = 16551;

const int CL_MEM_HOST_IOCOHERENT_QCOM = 16553;

const int CL_MEM_ION_HOST_PTR_QCOM = 16552;

const int CL_MEM_ANDROID_NATIVE_BUFFER_HOST_PTR_QCOM = 16582;

const int CL_NV21_IMG = 16592;

const int CL_YV12_IMG = 16593;

const int CL_MEM_USE_UNCACHED_CPU_MEMORY_IMG = 67108864;

const int CL_MEM_USE_CACHED_CPU_MEMORY_IMG = 134217728;

const int cl_img_use_gralloc_ptr = 1;

const int CL_MEM_USE_GRALLOC_PTR_IMG = 268435456;

const int CL_COMMAND_ACQUIRE_GRALLOC_OBJECTS_IMG = 16594;

const int CL_COMMAND_RELEASE_GRALLOC_OBJECTS_IMG = 16595;

const int CL_GRALLOC_RESOURCE_NOT_ACQUIRED_IMG = 16596;

const int CL_INVALID_GRALLOC_OBJECT_IMG = 16597;

const int cl_img_generate_mipmap = 1;

const int CL_MIPMAP_FILTER_ANY_IMG = 0;

const int CL_MIPMAP_FILTER_BOX_IMG = 1;

const int CL_COMMAND_GENERATE_MIPMAP_IMG = 16598;

const int cl_img_mem_properties = 1;

const int CL_MEM_ALLOC_FLAGS_IMG = 16599;

const int CL_MEM_ALLOC_RELAX_REQUIREMENTS_IMG = 1;

const int cl_khr_subgroups = 1;

const int CL_KERNEL_MAX_SUB_GROUP_SIZE_FOR_NDRANGE_KHR = 8243;

const int CL_KERNEL_SUB_GROUP_COUNT_FOR_NDRANGE_KHR = 8244;

const int CL_SAMPLER_MIP_FILTER_MODE_KHR = 4437;

const int CL_SAMPLER_LOD_MIN_KHR = 4438;

const int CL_SAMPLER_LOD_MAX_KHR = 4439;

const int cl_khr_priority_hints = 1;

const int CL_QUEUE_PRIORITY_KHR = 4246;

const int CL_QUEUE_PRIORITY_HIGH_KHR = 1;

const int CL_QUEUE_PRIORITY_MED_KHR = 2;

const int CL_QUEUE_PRIORITY_LOW_KHR = 4;

const int cl_khr_throttle_hints = 1;

const int CL_QUEUE_THROTTLE_KHR = 4247;

const int CL_QUEUE_THROTTLE_HIGH_KHR = 1;

const int CL_QUEUE_THROTTLE_MED_KHR = 2;

const int CL_QUEUE_THROTTLE_LOW_KHR = 4;

const int cl_khr_subgroup_named_barrier = 1;

const int CL_DEVICE_MAX_NAMED_BARRIER_COUNT_KHR = 8245;

const int cl_khr_extended_versioning = 1;

const int CL_VERSION_MAJOR_BITS_KHR = 10;

const int CL_VERSION_MINOR_BITS_KHR = 10;

const int CL_VERSION_PATCH_BITS_KHR = 12;

const int CL_VERSION_MAJOR_MASK_KHR = 1023;

const int CL_VERSION_MINOR_MASK_KHR = 1023;

const int CL_VERSION_PATCH_MASK_KHR = 4095;

const int CL_NAME_VERSION_MAX_NAME_SIZE_KHR = 64;

const int CL_PLATFORM_NUMERIC_VERSION_KHR = 2310;

const int CL_PLATFORM_EXTENSIONS_WITH_VERSION_KHR = 2311;

const int CL_DEVICE_NUMERIC_VERSION_KHR = 4190;

const int CL_DEVICE_OPENCL_C_NUMERIC_VERSION_KHR = 4191;

const int CL_DEVICE_EXTENSIONS_WITH_VERSION_KHR = 4192;

const int CL_DEVICE_ILS_WITH_VERSION_KHR = 4193;

const int CL_DEVICE_BUILT_IN_KERNELS_WITH_VERSION_KHR = 4194;

const int cl_khr_device_uuid = 1;

const int CL_UUID_SIZE_KHR = 16;

const int CL_LUID_SIZE_KHR = 8;

const int CL_DEVICE_UUID_KHR = 4202;

const int CL_DRIVER_UUID_KHR = 4203;

const int CL_DEVICE_LUID_VALID_KHR = 4204;

const int CL_DEVICE_LUID_KHR = 4205;

const int CL_DEVICE_NODE_MASK_KHR = 4206;

const int cl_khr_pci_bus_info = 1;

const int CL_DEVICE_PCI_BUS_INFO_KHR = 16655;

const int cl_khr_suggested_local_work_size = 1;

const int cl_khr_integer_dot_product = 1;

const int CL_DEVICE_INTEGER_DOT_PRODUCT_INPUT_4x8BIT_PACKED_KHR = 1;

const int CL_DEVICE_INTEGER_DOT_PRODUCT_INPUT_4x8BIT_KHR = 2;

const int CL_DEVICE_INTEGER_DOT_PRODUCT_CAPABILITIES_KHR = 4211;

const int CL_DEVICE_INTEGER_DOT_PRODUCT_ACCELERATION_PROPERTIES_8BIT_KHR = 4212;

const int
    CL_DEVICE_INTEGER_DOT_PRODUCT_ACCELERATION_PROPERTIES_4x8BIT_PACKED_KHR =
    4213;

const int cl_khr_external_memory = 1;

const int CL_PLATFORM_EXTERNAL_MEMORY_IMPORT_HANDLE_TYPES_KHR = 8260;

const int CL_DEVICE_EXTERNAL_MEMORY_IMPORT_HANDLE_TYPES_KHR = 8271;

const int CL_DEVICE_HANDLE_LIST_KHR = 8273;

const int CL_DEVICE_HANDLE_LIST_END_KHR = 0;

const int CL_COMMAND_ACQUIRE_EXTERNAL_MEM_OBJECTS_KHR = 8263;

const int CL_COMMAND_RELEASE_EXTERNAL_MEM_OBJECTS_KHR = 8264;

const int cl_khr_external_memory_dma_buf = 1;

const int CL_EXTERNAL_MEMORY_HANDLE_DMA_BUF_KHR = 8295;

const int cl_khr_external_memory_dx = 1;

const int CL_EXTERNAL_MEMORY_HANDLE_D3D11_TEXTURE_KHR = 8291;

const int CL_EXTERNAL_MEMORY_HANDLE_D3D11_TEXTURE_KMT_KHR = 8292;

const int CL_EXTERNAL_MEMORY_HANDLE_D3D12_HEAP_KHR = 8293;

const int CL_EXTERNAL_MEMORY_HANDLE_D3D12_RESOURCE_KHR = 8294;

const int cl_khr_external_memory_opaque_fd = 1;

const int CL_EXTERNAL_MEMORY_HANDLE_OPAQUE_FD_KHR = 8288;

const int cl_khr_external_memory_win32 = 1;

const int CL_EXTERNAL_MEMORY_HANDLE_OPAQUE_WIN32_KHR = 8289;

const int CL_EXTERNAL_MEMORY_HANDLE_OPAQUE_WIN32_KMT_KHR = 8290;

const int cl_khr_external_semaphore = 1;

const int CL_PLATFORM_SEMAPHORE_IMPORT_HANDLE_TYPES_KHR = 8247;

const int CL_PLATFORM_SEMAPHORE_EXPORT_HANDLE_TYPES_KHR = 8248;

const int CL_DEVICE_SEMAPHORE_IMPORT_HANDLE_TYPES_KHR = 8269;

const int CL_DEVICE_SEMAPHORE_EXPORT_HANDLE_TYPES_KHR = 8270;

const int CL_SEMAPHORE_EXPORT_HANDLE_TYPES_KHR = 8255;

const int CL_SEMAPHORE_EXPORT_HANDLE_TYPES_LIST_END_KHR = 0;

const int cl_khr_external_semaphore_dx_fence = 1;

const int CL_SEMAPHORE_HANDLE_D3D12_FENCE_KHR = 8281;

const int cl_khr_external_semaphore_opaque_fd = 1;

const int CL_SEMAPHORE_HANDLE_OPAQUE_FD_KHR = 8277;

const int cl_khr_external_semaphore_sync_fd = 1;

const int CL_SEMAPHORE_HANDLE_SYNC_FD_KHR = 8280;

const int cl_khr_external_semaphore_win32 = 1;

const int CL_SEMAPHORE_HANDLE_OPAQUE_WIN32_KHR = 8278;

const int CL_SEMAPHORE_HANDLE_OPAQUE_WIN32_KMT_KHR = 8279;

const int cl_khr_semaphore = 1;

const int CL_SEMAPHORE_TYPE_BINARY_KHR = 1;

const int CL_PLATFORM_SEMAPHORE_TYPES_KHR = 8246;

const int CL_DEVICE_SEMAPHORE_TYPES_KHR = 8268;

const int CL_SEMAPHORE_CONTEXT_KHR = 8249;

const int CL_SEMAPHORE_REFERENCE_COUNT_KHR = 8250;

const int CL_SEMAPHORE_PROPERTIES_KHR = 8251;

const int CL_SEMAPHORE_PAYLOAD_KHR = 8252;

const int CL_SEMAPHORE_TYPE_KHR = 8253;

const int CL_COMMAND_SEMAPHORE_WAIT_KHR = 8258;

const int CL_COMMAND_SEMAPHORE_SIGNAL_KHR = 8259;

const int CL_INVALID_SEMAPHORE_KHR = -1142;

const int cl_arm_import_memory = 1;

const int CL_IMPORT_TYPE_ARM = 16562;

const int CL_IMPORT_TYPE_HOST_ARM = 16563;

const int CL_IMPORT_TYPE_DMA_BUF_ARM = 16564;

const int CL_IMPORT_TYPE_PROTECTED_ARM = 16565;

const int CL_IMPORT_TYPE_ANDROID_HARDWARE_BUFFER_ARM = 16866;

const int CL_IMPORT_DMA_BUF_DATA_CONSISTENCY_WITH_HOST_ARM = 16867;

const int CL_IMPORT_ANDROID_HARDWARE_BUFFER_PLANE_INDEX_ARM = 16879;

const int CL_IMPORT_ANDROID_HARDWARE_BUFFER_LAYER_INDEX_ARM = 16880;

const int CL_IMPORT_MEMORY_WHOLE_ALLOCATION_ARM = -1;

const int cl_arm_shared_virtual_memory = 1;

const int CL_DEVICE_SVM_CAPABILITIES_ARM = 16566;

const int CL_MEM_USES_SVM_POINTER_ARM = 16567;

const int CL_KERNEL_EXEC_INFO_SVM_PTRS_ARM = 16568;

const int CL_KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM_ARM = 16569;

const int CL_COMMAND_SVM_FREE_ARM = 16570;

const int CL_COMMAND_SVM_MEMCPY_ARM = 16571;

const int CL_COMMAND_SVM_MEMFILL_ARM = 16572;

const int CL_COMMAND_SVM_MAP_ARM = 16573;

const int CL_COMMAND_SVM_UNMAP_ARM = 16574;

const int CL_DEVICE_SVM_COARSE_GRAIN_BUFFER_ARM = 1;

const int CL_DEVICE_SVM_FINE_GRAIN_BUFFER_ARM = 2;

const int CL_DEVICE_SVM_FINE_GRAIN_SYSTEM_ARM = 4;

const int CL_DEVICE_SVM_ATOMICS_ARM = 8;

const int CL_MEM_SVM_FINE_GRAIN_BUFFER_ARM = 1024;

const int CL_MEM_SVM_ATOMICS_ARM = 2048;

const int cl_arm_get_core_id = 1;

const int CL_DEVICE_COMPUTE_UNITS_BITFIELD_ARM = 16575;

const int cl_arm_job_slot_selection = 1;

const int CL_DEVICE_JOB_SLOTS_ARM = 16864;

const int CL_QUEUE_JOB_SLOT_ARM = 16865;

const int cl_arm_scheduling_controls = 1;

const int CL_DEVICE_SCHEDULING_CONTROLS_CAPABILITIES_ARM = 16868;

const int CL_DEVICE_SCHEDULING_KERNEL_BATCHING_ARM = 1;

const int CL_DEVICE_SCHEDULING_WORKGROUP_BATCH_SIZE_ARM = 2;

const int CL_DEVICE_SCHEDULING_WORKGROUP_BATCH_SIZE_MODIFIER_ARM = 4;

const int CL_DEVICE_SCHEDULING_DEFERRED_FLUSH_ARM = 8;

const int CL_DEVICE_SCHEDULING_REGISTER_ALLOCATION_ARM = 16;

const int CL_DEVICE_SUPPORTED_REGISTER_ALLOCATIONS_ARM = 16875;

const int CL_KERNEL_EXEC_INFO_WORKGROUP_BATCH_SIZE_ARM = 16869;

const int CL_KERNEL_EXEC_INFO_WORKGROUP_BATCH_SIZE_MODIFIER_ARM = 16870;

const int CL_QUEUE_KERNEL_BATCHING_ARM = 16871;

const int CL_QUEUE_DEFERRED_FLUSH_ARM = 16876;

const int cl_arm_controlled_kernel_termination = 1;

const int CL_COMMAND_TERMINATED_ITSELF_WITH_FAILURE_ARM = -1108;

const int CL_DEVICE_CONTROLLED_TERMINATION_CAPABILITIES_ARM = 16878;

const int CL_DEVICE_CONTROLLED_TERMINATION_SUCCESS_ARM = 1;

const int CL_DEVICE_CONTROLLED_TERMINATION_FAILURE_ARM = 2;

const int CL_DEVICE_CONTROLLED_TERMINATION_QUERY_ARM = 4;

const int CL_EVENT_COMMAND_TERMINATION_REASON_ARM = 16877;

const int CL_COMMAND_TERMINATION_COMPLETION_ARM = 0;

const int CL_COMMAND_TERMINATION_CONTROLLED_SUCCESS_ARM = 1;

const int CL_COMMAND_TERMINATION_CONTROLLED_FAILURE_ARM = 2;

const int CL_COMMAND_TERMINATION_ERROR_ARM = 3;

const int cl_arm_protected_memory_allocation = 1;

const int CL_MEM_PROTECTED_ALLOC_ARM = 68719476736;

const int cl_intel_exec_by_local_thread = 1;

const int CL_QUEUE_THREAD_LOCAL_EXEC_ENABLE_INTEL = 2147483648;

const int cl_intel_device_attribute_query = 1;

const int CL_DEVICE_FEATURE_FLAG_DP4A_INTEL = 1;

const int CL_DEVICE_FEATURE_FLAG_DPAS_INTEL = 2;

const int CL_DEVICE_IP_VERSION_INTEL = 16976;

const int CL_DEVICE_ID_INTEL = 16977;

const int CL_DEVICE_NUM_SLICES_INTEL = 16978;

const int CL_DEVICE_NUM_SUB_SLICES_PER_SLICE_INTEL = 16979;

const int CL_DEVICE_NUM_EUS_PER_SUB_SLICE_INTEL = 16980;

const int CL_DEVICE_NUM_THREADS_PER_EU_INTEL = 16981;

const int CL_DEVICE_FEATURE_CAPABILITIES_INTEL = 16982;

const int cl_intel_device_partition_by_names = 1;

const int CL_DEVICE_PARTITION_BY_NAMES_INTEL = 16466;

const int CL_PARTITION_BY_NAMES_LIST_END_INTEL = -1;

const int cl_intel_accelerator = 1;

const int cl_intel_motion_estimation = 1;

const int cl_intel_advanced_motion_estimation = 1;

const int CL_INVALID_ACCELERATOR_INTEL = -1094;

const int CL_INVALID_ACCELERATOR_TYPE_INTEL = -1095;

const int CL_INVALID_ACCELERATOR_DESCRIPTOR_INTEL = -1096;

const int CL_ACCELERATOR_TYPE_NOT_SUPPORTED_INTEL = -1097;

const int CL_ACCELERATOR_TYPE_MOTION_ESTIMATION_INTEL = 0;

const int CL_ACCELERATOR_DESCRIPTOR_INTEL = 16528;

const int CL_ACCELERATOR_REFERENCE_COUNT_INTEL = 16529;

const int CL_ACCELERATOR_CONTEXT_INTEL = 16530;

const int CL_ACCELERATOR_TYPE_INTEL = 16531;

const int CL_ME_MB_TYPE_16x16_INTEL = 0;

const int CL_ME_MB_TYPE_8x8_INTEL = 1;

const int CL_ME_MB_TYPE_4x4_INTEL = 2;

const int CL_ME_SUBPIXEL_MODE_INTEGER_INTEL = 0;

const int CL_ME_SUBPIXEL_MODE_HPEL_INTEL = 1;

const int CL_ME_SUBPIXEL_MODE_QPEL_INTEL = 2;

const int CL_ME_SAD_ADJUST_MODE_NONE_INTEL = 0;

const int CL_ME_SAD_ADJUST_MODE_HAAR_INTEL = 1;

const int CL_ME_SEARCH_PATH_RADIUS_2_2_INTEL = 0;

const int CL_ME_SEARCH_PATH_RADIUS_4_4_INTEL = 1;

const int CL_ME_SEARCH_PATH_RADIUS_16_12_INTEL = 5;

const int CL_ME_SKIP_BLOCK_TYPE_16x16_INTEL = 0;

const int CL_ME_CHROMA_INTRA_PREDICT_ENABLED_INTEL = 1;

const int CL_ME_LUMA_INTRA_PREDICT_ENABLED_INTEL = 2;

const int CL_ME_SKIP_BLOCK_TYPE_8x8_INTEL = 4;

const int CL_ME_FORWARD_INPUT_MODE_INTEL = 1;

const int CL_ME_BACKWARD_INPUT_MODE_INTEL = 2;

const int CL_ME_BIDIRECTION_INPUT_MODE_INTEL = 3;

const int CL_ME_BIDIR_WEIGHT_QUARTER_INTEL = 16;

const int CL_ME_BIDIR_WEIGHT_THIRD_INTEL = 21;

const int CL_ME_BIDIR_WEIGHT_HALF_INTEL = 32;

const int CL_ME_BIDIR_WEIGHT_TWO_THIRD_INTEL = 43;

const int CL_ME_BIDIR_WEIGHT_THREE_QUARTER_INTEL = 48;

const int CL_ME_COST_PENALTY_NONE_INTEL = 0;

const int CL_ME_COST_PENALTY_LOW_INTEL = 1;

const int CL_ME_COST_PENALTY_NORMAL_INTEL = 2;

const int CL_ME_COST_PENALTY_HIGH_INTEL = 3;

const int CL_ME_COST_PRECISION_QPEL_INTEL = 0;

const int CL_ME_COST_PRECISION_HPEL_INTEL = 1;

const int CL_ME_COST_PRECISION_PEL_INTEL = 2;

const int CL_ME_COST_PRECISION_DPEL_INTEL = 3;

const int CL_ME_LUMA_PREDICTOR_MODE_VERTICAL_INTEL = 0;

const int CL_ME_LUMA_PREDICTOR_MODE_HORIZONTAL_INTEL = 1;

const int CL_ME_LUMA_PREDICTOR_MODE_DC_INTEL = 2;

const int CL_ME_LUMA_PREDICTOR_MODE_DIAGONAL_DOWN_LEFT_INTEL = 3;

const int CL_ME_LUMA_PREDICTOR_MODE_DIAGONAL_DOWN_RIGHT_INTEL = 4;

const int CL_ME_LUMA_PREDICTOR_MODE_PLANE_INTEL = 4;

const int CL_ME_LUMA_PREDICTOR_MODE_VERTICAL_RIGHT_INTEL = 5;

const int CL_ME_LUMA_PREDICTOR_MODE_HORIZONTAL_DOWN_INTEL = 6;

const int CL_ME_LUMA_PREDICTOR_MODE_VERTICAL_LEFT_INTEL = 7;

const int CL_ME_LUMA_PREDICTOR_MODE_HORIZONTAL_UP_INTEL = 8;

const int CL_ME_CHROMA_PREDICTOR_MODE_DC_INTEL = 0;

const int CL_ME_CHROMA_PREDICTOR_MODE_HORIZONTAL_INTEL = 1;

const int CL_ME_CHROMA_PREDICTOR_MODE_VERTICAL_INTEL = 2;

const int CL_ME_CHROMA_PREDICTOR_MODE_PLANE_INTEL = 3;

const int CL_DEVICE_ME_VERSION_INTEL = 16510;

const int CL_ME_VERSION_LEGACY_INTEL = 0;

const int CL_ME_VERSION_ADVANCED_VER_1_INTEL = 1;

const int CL_ME_VERSION_ADVANCED_VER_2_INTEL = 2;

const int cl_intel_simultaneous_sharing = 1;

const int CL_DEVICE_SIMULTANEOUS_INTEROPS_INTEL = 16644;

const int CL_DEVICE_NUM_SIMULTANEOUS_INTEROPS_INTEL = 16645;

const int cl_intel_egl_image_yuv = 1;

const int CL_EGL_YUV_PLANE_INTEL = 16647;

const int cl_intel_packed_yuv = 1;

const int CL_YUYV_INTEL = 16502;

const int CL_UYVY_INTEL = 16503;

const int CL_YVYU_INTEL = 16504;

const int CL_VYUY_INTEL = 16505;

const int cl_intel_required_subgroup_size = 1;

const int CL_DEVICE_SUB_GROUP_SIZES_INTEL = 16648;

const int CL_KERNEL_SPILL_MEM_SIZE_INTEL = 16649;

const int CL_KERNEL_COMPILE_SUB_GROUP_SIZE_INTEL = 16650;

const int cl_intel_driver_diagnostics = 1;

const int CL_CONTEXT_SHOW_DIAGNOSTICS_INTEL = 16646;

const int CL_CONTEXT_DIAGNOSTICS_LEVEL_ALL_INTEL = 255;

const int CL_CONTEXT_DIAGNOSTICS_LEVEL_GOOD_INTEL = 1;

const int CL_CONTEXT_DIAGNOSTICS_LEVEL_BAD_INTEL = 2;

const int CL_CONTEXT_DIAGNOSTICS_LEVEL_NEUTRAL_INTEL = 4;

const int CL_NV12_INTEL = 16654;

const int CL_MEM_NO_ACCESS_INTEL = 16777216;

const int CL_MEM_ACCESS_FLAGS_UNRESTRICTED_INTEL = 33554432;

const int CL_DEVICE_PLANAR_YUV_MAX_WIDTH_INTEL = 16766;

const int CL_DEVICE_PLANAR_YUV_MAX_HEIGHT_INTEL = 16767;

const int CL_DEVICE_AVC_ME_VERSION_INTEL = 16651;

const int CL_DEVICE_AVC_ME_SUPPORTS_TEXTURE_SAMPLER_USE_INTEL = 16652;

const int CL_DEVICE_AVC_ME_SUPPORTS_PREEMPTION_INTEL = 16653;

const int CL_AVC_ME_VERSION_0_INTEL = 0;

const int CL_AVC_ME_VERSION_1_INTEL = 1;

const int CL_AVC_ME_MAJOR_16x16_INTEL = 0;

const int CL_AVC_ME_MAJOR_16x8_INTEL = 1;

const int CL_AVC_ME_MAJOR_8x16_INTEL = 2;

const int CL_AVC_ME_MAJOR_8x8_INTEL = 3;

const int CL_AVC_ME_MINOR_8x8_INTEL = 0;

const int CL_AVC_ME_MINOR_8x4_INTEL = 1;

const int CL_AVC_ME_MINOR_4x8_INTEL = 2;

const int CL_AVC_ME_MINOR_4x4_INTEL = 3;

const int CL_AVC_ME_MAJOR_FORWARD_INTEL = 0;

const int CL_AVC_ME_MAJOR_BACKWARD_INTEL = 1;

const int CL_AVC_ME_MAJOR_BIDIRECTIONAL_INTEL = 2;

const int CL_AVC_ME_PARTITION_MASK_ALL_INTEL = 0;

const int CL_AVC_ME_PARTITION_MASK_16x16_INTEL = 126;

const int CL_AVC_ME_PARTITION_MASK_16x8_INTEL = 125;

const int CL_AVC_ME_PARTITION_MASK_8x16_INTEL = 123;

const int CL_AVC_ME_PARTITION_MASK_8x8_INTEL = 119;

const int CL_AVC_ME_PARTITION_MASK_8x4_INTEL = 111;

const int CL_AVC_ME_PARTITION_MASK_4x8_INTEL = 95;

const int CL_AVC_ME_PARTITION_MASK_4x4_INTEL = 63;

const int CL_AVC_ME_SEARCH_WINDOW_EXHAUSTIVE_INTEL = 0;

const int CL_AVC_ME_SEARCH_WINDOW_SMALL_INTEL = 1;

const int CL_AVC_ME_SEARCH_WINDOW_TINY_INTEL = 2;

const int CL_AVC_ME_SEARCH_WINDOW_EXTRA_TINY_INTEL = 3;

const int CL_AVC_ME_SEARCH_WINDOW_DIAMOND_INTEL = 4;

const int CL_AVC_ME_SEARCH_WINDOW_LARGE_DIAMOND_INTEL = 5;

const int CL_AVC_ME_SEARCH_WINDOW_RESERVED0_INTEL = 6;

const int CL_AVC_ME_SEARCH_WINDOW_RESERVED1_INTEL = 7;

const int CL_AVC_ME_SEARCH_WINDOW_CUSTOM_INTEL = 8;

const int CL_AVC_ME_SEARCH_WINDOW_16x12_RADIUS_INTEL = 9;

const int CL_AVC_ME_SEARCH_WINDOW_4x4_RADIUS_INTEL = 2;

const int CL_AVC_ME_SEARCH_WINDOW_2x2_RADIUS_INTEL = 10;

const int CL_AVC_ME_SAD_ADJUST_MODE_NONE_INTEL = 0;

const int CL_AVC_ME_SAD_ADJUST_MODE_HAAR_INTEL = 2;

const int CL_AVC_ME_SUBPIXEL_MODE_INTEGER_INTEL = 0;

const int CL_AVC_ME_SUBPIXEL_MODE_HPEL_INTEL = 1;

const int CL_AVC_ME_SUBPIXEL_MODE_QPEL_INTEL = 3;

const int CL_AVC_ME_COST_PRECISION_QPEL_INTEL = 0;

const int CL_AVC_ME_COST_PRECISION_HPEL_INTEL = 1;

const int CL_AVC_ME_COST_PRECISION_PEL_INTEL = 2;

const int CL_AVC_ME_COST_PRECISION_DPEL_INTEL = 3;

const int CL_AVC_ME_BIDIR_WEIGHT_QUARTER_INTEL = 16;

const int CL_AVC_ME_BIDIR_WEIGHT_THIRD_INTEL = 21;

const int CL_AVC_ME_BIDIR_WEIGHT_HALF_INTEL = 32;

const int CL_AVC_ME_BIDIR_WEIGHT_TWO_THIRD_INTEL = 43;

const int CL_AVC_ME_BIDIR_WEIGHT_THREE_QUARTER_INTEL = 48;

const int CL_AVC_ME_BORDER_REACHED_LEFT_INTEL = 0;

const int CL_AVC_ME_BORDER_REACHED_RIGHT_INTEL = 2;

const int CL_AVC_ME_BORDER_REACHED_TOP_INTEL = 4;

const int CL_AVC_ME_BORDER_REACHED_BOTTOM_INTEL = 8;

const int CL_AVC_ME_SKIP_BLOCK_PARTITION_16x16_INTEL = 0;

const int CL_AVC_ME_SKIP_BLOCK_PARTITION_8x8_INTEL = 16384;

const int CL_AVC_ME_SKIP_BLOCK_16x16_FORWARD_ENABLE_INTEL = 16777216;

const int CL_AVC_ME_SKIP_BLOCK_16x16_BACKWARD_ENABLE_INTEL = 33554432;

const int CL_AVC_ME_SKIP_BLOCK_16x16_DUAL_ENABLE_INTEL = 50331648;

const int CL_AVC_ME_SKIP_BLOCK_8x8_FORWARD_ENABLE_INTEL = 1426063360;

const int CL_AVC_ME_SKIP_BLOCK_8x8_BACKWARD_ENABLE_INTEL = -1442840576;

const int CL_AVC_ME_SKIP_BLOCK_8x8_DUAL_ENABLE_INTEL = -16777216;

const int CL_AVC_ME_SKIP_BLOCK_8x8_0_FORWARD_ENABLE_INTEL = 16777216;

const int CL_AVC_ME_SKIP_BLOCK_8x8_0_BACKWARD_ENABLE_INTEL = 33554432;

const int CL_AVC_ME_SKIP_BLOCK_8x8_1_FORWARD_ENABLE_INTEL = 67108864;

const int CL_AVC_ME_SKIP_BLOCK_8x8_1_BACKWARD_ENABLE_INTEL = 134217728;

const int CL_AVC_ME_SKIP_BLOCK_8x8_2_FORWARD_ENABLE_INTEL = 268435456;

const int CL_AVC_ME_SKIP_BLOCK_8x8_2_BACKWARD_ENABLE_INTEL = 536870912;

const int CL_AVC_ME_SKIP_BLOCK_8x8_3_FORWARD_ENABLE_INTEL = 1073741824;

const int CL_AVC_ME_SKIP_BLOCK_8x8_3_BACKWARD_ENABLE_INTEL = -2147483648;

const int CL_AVC_ME_BLOCK_BASED_SKIP_4x4_INTEL = 0;

const int CL_AVC_ME_BLOCK_BASED_SKIP_8x8_INTEL = 128;

const int CL_AVC_ME_INTRA_16x16_INTEL = 0;

const int CL_AVC_ME_INTRA_8x8_INTEL = 1;

const int CL_AVC_ME_INTRA_4x4_INTEL = 2;

const int CL_AVC_ME_INTRA_LUMA_PARTITION_MASK_16x16_INTEL = 6;

const int CL_AVC_ME_INTRA_LUMA_PARTITION_MASK_8x8_INTEL = 5;

const int CL_AVC_ME_INTRA_LUMA_PARTITION_MASK_4x4_INTEL = 3;

const int CL_AVC_ME_INTRA_NEIGHBOR_LEFT_MASK_ENABLE_INTEL = 96;

const int CL_AVC_ME_INTRA_NEIGHBOR_UPPER_MASK_ENABLE_INTEL = 16;

const int CL_AVC_ME_INTRA_NEIGHBOR_UPPER_RIGHT_MASK_ENABLE_INTEL = 8;

const int CL_AVC_ME_INTRA_NEIGHBOR_UPPER_LEFT_MASK_ENABLE_INTEL = 4;

const int CL_AVC_ME_LUMA_PREDICTOR_MODE_VERTICAL_INTEL = 0;

const int CL_AVC_ME_LUMA_PREDICTOR_MODE_HORIZONTAL_INTEL = 1;

const int CL_AVC_ME_LUMA_PREDICTOR_MODE_DC_INTEL = 2;

const int CL_AVC_ME_LUMA_PREDICTOR_MODE_DIAGONAL_DOWN_LEFT_INTEL = 3;

const int CL_AVC_ME_LUMA_PREDICTOR_MODE_DIAGONAL_DOWN_RIGHT_INTEL = 4;

const int CL_AVC_ME_LUMA_PREDICTOR_MODE_PLANE_INTEL = 4;

const int CL_AVC_ME_LUMA_PREDICTOR_MODE_VERTICAL_RIGHT_INTEL = 5;

const int CL_AVC_ME_LUMA_PREDICTOR_MODE_HORIZONTAL_DOWN_INTEL = 6;

const int CL_AVC_ME_LUMA_PREDICTOR_MODE_VERTICAL_LEFT_INTEL = 7;

const int CL_AVC_ME_LUMA_PREDICTOR_MODE_HORIZONTAL_UP_INTEL = 8;

const int CL_AVC_ME_CHROMA_PREDICTOR_MODE_DC_INTEL = 0;

const int CL_AVC_ME_CHROMA_PREDICTOR_MODE_HORIZONTAL_INTEL = 1;

const int CL_AVC_ME_CHROMA_PREDICTOR_MODE_VERTICAL_INTEL = 2;

const int CL_AVC_ME_CHROMA_PREDICTOR_MODE_PLANE_INTEL = 3;

const int CL_AVC_ME_FRAME_FORWARD_INTEL = 1;

const int CL_AVC_ME_FRAME_BACKWARD_INTEL = 2;

const int CL_AVC_ME_FRAME_DUAL_INTEL = 3;

const int CL_AVC_ME_SLICE_TYPE_PRED_INTEL = 0;

const int CL_AVC_ME_SLICE_TYPE_BPRED_INTEL = 1;

const int CL_AVC_ME_SLICE_TYPE_INTRA_INTEL = 2;

const int CL_AVC_ME_INTERLACED_SCAN_TOP_FIELD_INTEL = 0;

const int CL_AVC_ME_INTERLACED_SCAN_BOTTOM_FIELD_INTEL = 1;

const int cl_intel_unified_shared_memory = 1;

const int CL_DEVICE_HOST_MEM_CAPABILITIES_INTEL = 16784;

const int CL_DEVICE_DEVICE_MEM_CAPABILITIES_INTEL = 16785;

const int CL_DEVICE_SINGLE_DEVICE_SHARED_MEM_CAPABILITIES_INTEL = 16786;

const int CL_DEVICE_CROSS_DEVICE_SHARED_MEM_CAPABILITIES_INTEL = 16787;

const int CL_DEVICE_SHARED_SYSTEM_MEM_CAPABILITIES_INTEL = 16788;

const int CL_UNIFIED_SHARED_MEMORY_ACCESS_INTEL = 1;

const int CL_UNIFIED_SHARED_MEMORY_ATOMIC_ACCESS_INTEL = 2;

const int CL_UNIFIED_SHARED_MEMORY_CONCURRENT_ACCESS_INTEL = 4;

const int CL_UNIFIED_SHARED_MEMORY_CONCURRENT_ATOMIC_ACCESS_INTEL = 8;

const int CL_MEM_ALLOC_FLAGS_INTEL = 16789;

const int CL_MEM_ALLOC_WRITE_COMBINED_INTEL = 1;

const int CL_MEM_ALLOC_INITIAL_PLACEMENT_DEVICE_INTEL = 2;

const int CL_MEM_ALLOC_INITIAL_PLACEMENT_HOST_INTEL = 4;

const int CL_MEM_ALLOC_TYPE_INTEL = 16794;

const int CL_MEM_ALLOC_BASE_PTR_INTEL = 16795;

const int CL_MEM_ALLOC_SIZE_INTEL = 16796;

const int CL_MEM_ALLOC_DEVICE_INTEL = 16797;

const int CL_MEM_TYPE_UNKNOWN_INTEL = 16790;

const int CL_MEM_TYPE_HOST_INTEL = 16791;

const int CL_MEM_TYPE_DEVICE_INTEL = 16792;

const int CL_MEM_TYPE_SHARED_INTEL = 16793;

const int CL_KERNEL_EXEC_INFO_INDIRECT_HOST_ACCESS_INTEL = 16896;

const int CL_KERNEL_EXEC_INFO_INDIRECT_DEVICE_ACCESS_INTEL = 16897;

const int CL_KERNEL_EXEC_INFO_INDIRECT_SHARED_ACCESS_INTEL = 16898;

const int CL_KERNEL_EXEC_INFO_USM_PTRS_INTEL = 16899;

const int CL_COMMAND_MEMFILL_INTEL = 16900;

const int CL_COMMAND_MEMCPY_INTEL = 16901;

const int CL_COMMAND_MIGRATEMEM_INTEL = 16902;

const int CL_COMMAND_MEMADVISE_INTEL = 16903;

const int cl_intel_mem_alloc_buffer_location = 1;

const String CL_INTEL_MEM_ALLOC_BUFFER_LOCATION_EXTENSION_NAME =
    'cl_intel_mem_alloc_buffer_location';

const int CL_MEM_ALLOC_BUFFER_LOCATION_INTEL = 16798;

const int cl_intel_create_buffer_with_properties = 1;

const int CL_MEM_CHANNEL_INTEL = 16915;

const int cl_intel_mem_force_host_memory = 1;

const int CL_MEM_FORCE_HOST_MEMORY_INTEL = 1048576;

const int cl_intel_command_queue_families = 1;

const int CL_QUEUE_FAMILY_MAX_NAME_SIZE_INTEL = 64;

const int CL_DEVICE_QUEUE_FAMILY_PROPERTIES_INTEL = 16779;

const int CL_QUEUE_FAMILY_INTEL = 16780;

const int CL_QUEUE_INDEX_INTEL = 16781;

const int CL_QUEUE_DEFAULT_CAPABILITIES_INTEL = 0;

const int CL_QUEUE_CAPABILITY_CREATE_SINGLE_QUEUE_EVENTS_INTEL = 1;

const int CL_QUEUE_CAPABILITY_CREATE_CROSS_QUEUE_EVENTS_INTEL = 2;

const int CL_QUEUE_CAPABILITY_SINGLE_QUEUE_EVENT_WAIT_LIST_INTEL = 4;

const int CL_QUEUE_CAPABILITY_CROSS_QUEUE_EVENT_WAIT_LIST_INTEL = 8;

const int CL_QUEUE_CAPABILITY_TRANSFER_BUFFER_INTEL = 256;

const int CL_QUEUE_CAPABILITY_TRANSFER_BUFFER_RECT_INTEL = 512;

const int CL_QUEUE_CAPABILITY_MAP_BUFFER_INTEL = 1024;

const int CL_QUEUE_CAPABILITY_FILL_BUFFER_INTEL = 2048;

const int CL_QUEUE_CAPABILITY_TRANSFER_IMAGE_INTEL = 4096;

const int CL_QUEUE_CAPABILITY_MAP_IMAGE_INTEL = 8192;

const int CL_QUEUE_CAPABILITY_FILL_IMAGE_INTEL = 16384;

const int CL_QUEUE_CAPABILITY_TRANSFER_BUFFER_IMAGE_INTEL = 32768;

const int CL_QUEUE_CAPABILITY_TRANSFER_IMAGE_BUFFER_INTEL = 65536;

const int CL_QUEUE_CAPABILITY_MARKER_INTEL = 16777216;

const int CL_QUEUE_CAPABILITY_BARRIER_INTEL = 33554432;

const int CL_QUEUE_CAPABILITY_KERNEL_INTEL = 67108864;

const int cl_intel_sharing_format_query = 1;

const int cl_ext_image_requirements_info = 1;

const int CL_IMAGE_REQUIREMENTS_ROW_PITCH_ALIGNMENT_EXT = 4752;

const int CL_IMAGE_REQUIREMENTS_BASE_ADDRESS_ALIGNMENT_EXT = 4754;

const int CL_IMAGE_REQUIREMENTS_SIZE_EXT = 4786;

const int CL_IMAGE_REQUIREMENTS_MAX_WIDTH_EXT = 4787;

const int CL_IMAGE_REQUIREMENTS_MAX_HEIGHT_EXT = 4788;

const int CL_IMAGE_REQUIREMENTS_MAX_DEPTH_EXT = 4789;

const int CL_IMAGE_REQUIREMENTS_MAX_ARRAY_SIZE_EXT = 4790;

const int cl_ext_image_from_buffer = 1;

const int CL_IMAGE_REQUIREMENTS_SLICE_PITCH_ALIGNMENT_EXT = 4753;
